{"version":3,"names":[],"mappings":"","sources":["unit_spec.js"],"sourcesContent":["// * unit_spec.js\n// * tests intra-state functions - functions not causing state change\n//   but used by other actions causing state change\n//\n// * @dependencies: components to be tested, config, three.js\n//   @param {app/services/mediator-service} Mediator<br>\n//   @param {app/services/mixin-service} Mixin<br>\n//   @param {app/services/transform3d-service} Transform3d<br>\n//   @param {app/services/camera3d-service} Camera3d<br>\n//   @param {index.html} Angular object value 'config'<br>\n//\n// * NOTE: all args but components to be unit-tested\n\n\nvar unit_spec = (Mediator, Mixin, Transform3d, Camera3d, config) => {\n  \"use strict\";\n\n  // closure vars for tests\n  var test_mediator = true,   // control span of testing\n      test_mixin = true,\n      test_t3d = true,\n      test_c3d = true,\n      tests = 0,\n      failed = 0,\n\n      test = {                // suite of unit tests\n\n        // * Camera3d.lookAt\n        // * NOTE: expect unit tests to be run on opening scene, or any scene\n        //   such that the camerasphere is at (0,0,0)\n        c3d() {\n          var tests = 0,\n              failed = 0;\n         \n          // test case1\n          console.log(\"Camera3d.lookAt:test case1\");\n          let r = Camera3d.lookAt(0,0,0);\n          tests++;\n          if(Array.isArray(r)){\n            tests++;\n            for(let e of r){\n              if(e!==0){\n                console.log(`!C3d.lookAt:expected array of three zeros: r=${r}`);\n                failed++;\n                break;\n              }\n            }\n          }else{\n            console.log(`!C3d.lookAt:expected array return from camera3d.lookAt(0,0,0): r=${r}`);\n            failed++;\n          }\n          \n          // test case2\n          console.log(\"Camera3d.lookAt:test case2\");\n          r = Camera3d.lookAt([1,1,1]);\n          tests++;\n          if(Array.isArray(r)){\n            tests++;\n            for(let e of r){\n              if(e!==1){\n                console.log(`!C3d.lookAt:expected array of three ones: r=${r}`);\n                failed++;\n                break;\n              }\n            }\n          }else{\n            console.log(`!C3d.lookAt:expected array return from camera3d.lookAt([1,1,1]): r=${r}`);\n            failed++;\n          }\n\n          // test case3\n          console.log(\"Camera3d.lookAt:test case3\");\n          r = Camera3d.lookAt();\n          tests++;\n          if(Array.isArray(r)){\n            tests++;\n            for(let e of r){\n              if(e!==0){\n                console.log(`!C3d.lookAt:expected array of three zeros: r=${r}`);\n                failed++;\n                break;\n              }\n            }\n          }else{\n            console.log(`!C3d.lookAtexpected array return from camera3d.lookAt(): r=${r}`);\n            failed++;\n          }\n\n          // test case4\n          console.log(\"Camera3d.lookAt:test case4\");\n          r = Camera3d.lookAt('camera');\n          tests++;\n          if(Array.isArray(r)){\n            tests++;\n            if(r[0]!==0 || r[1]!==0 || r[2]!==50){\n              console.log(`!C3d.lookAt:expected array [0,0,50]: r=${r}`);\n              failed++;\n            }\n          }else{\n            console.log(`!C3d.lookAt:expected array return from camera3d.lookAt(): r=${r}`);\n            failed++;\n          }\n\n          // report Camera3d results\n          return {te:tests, f:failed};\n        },//c3d()\n\n\n        // * Mixin.extend; Mixin.include\n        mixin() {\n          var tests = 0,\n              failed = 0,\n              o = {},\n              F = function(){},\n              instance = {},\n              m0 = {ext: function(){ return \"extension\";}},\n              proto = {p: \"a\",\n                   f: function(){return 'foo';}},\n              m1 = Object.create(proto);\n\n          // test case1\n          console.log(\"Mixin.extend:test case1\");\n          Mixin.extend(o, m0);\n          tests++;\n          if(o.ext()!==\"extension\"){\n            console.log(`!Mixin.extend:expected o.ext()=\"extension\" \n              o.ext()=${o.ext()}`);\n            failed++;\n          }\n\n          // test case2\n          console.log(\"Mixin.include:test case2\");\n          Mixin.include(F, m0);\n          instance = new F();\n          tests++;\n          if(instance.ext()!==\"extension\"){\n            console.log(`!Mixin.include:expected instance.ext()=\"extension\" \n              instance.ext()=${instance.ext()}`);\n            failed++;\n          }\n\n          // test case3\n          console.log(\"Mixin.extend_all:test case3\");\n          o = {};\n          Mixin.extend_all(o, m1);\n          tests++;\n          if(!Mixin.verify(o,'p')){\n            console.log(`!Mixin.extend_all:expected o to have property p`);\n            failed++;\n          }\n          tests++;\n          if(!Mixin.verify(o,'f')){\n            console.log(`!Mixin.extend_all:expected o to have property f`);\n            failed++;\n          }\n          tests++;\n          if(o.p !== 'a'){\n            console.log(`!Mixin.extend_all:expected o.p='a' o.p=${o.p}`);\n            failed++;\n          }\n          tests++;\n          if(o.f() !== 'foo'){\n            console.log(`!Mixin.extend_all:expected o.f()='foo' o.f()=${o.f()}`);\n            failed++;\n          }\n\n          // test case4\n          console.log(\"Mixin.include_all:test case4\");\n          Mixin.include_all(F, m1);\n          instance = new F();\n          tests++;\n          if(!Mixin.verify(instance,'p')){\n            console.log(`!Mixin.include_all:expected instance to have property p`);\n            failed++;\n          }\n          tests++;\n          if(!Mixin.verify(instance,'f')){\n            console.log(`!Mixin.include_all:expected instance to have property f`);\n            failed++;\n          }\n          tests++;\n          if(instance.p !== 'a'){\n            console.log(`!Mixin.include_all:expected instance.p='a' instancep=${instance.p}`);\n            failed++;\n          }\n          tests++;\n          if(instance.f() !== 'foo'){\n            console.log(`!Mixin.include_all:expected instance.f()='foo' instance.f()=${instance.f()}`);\n            failed++;\n          }\n\n          // report Mixin results \n          return {te:tests, f:failed};\n        },//mixin\n\n\n        // * Mediator.emit; Mediator.exec - cases\n        mediator() {\n          var tests = 0,\n              failed = 0,\n              r;\n\n          // test case1\n          tests++;\n          if(check.assert(!Mediator.emit('foo', \"\"),`!Mediator.emit:expected send on non-existing channel 'foo' to return false`)){\n            failed++;\n          }\n\n          // test case2\n          tests++;\n          console.log(\"Mediator.exec: id = csphere\"); \n          r = Mediator.exec({id:'csphere' , f:\"foo\", a:7});\n          if(check.undefined(r) || check.emptyObject(r)){\n            console.log(`!Mediator.exec:expected full object - r=${r}`);\n            failed++;\n          }\n          tests++;\n          console.log(\"Mediator.exec: id = :csphere\"); \n          r = Mediator.exec({id:':csphere' , f:\"foo\", a:7});\n          if(check.undefined(r) || check.emptyObject(r)){\n            console.log(`!Mediator.exec:expected full object - r=${r}`);\n            failed++;\n          }\n          tests++;\n          console.log(\"Mediator.exec: id = i3d:csphere\"); \n          r = Mediator.exec({id:'i3d:csphere' , f:\"foo\", a:7});\n          if(check.undefined(r) || check.emptyObject(r)){\n            console.log(`!Mediator.exec:expected full object - r=${r}`);\n            failed++;\n          }\n          tests++;\n          console.log(\"Mediator.exec: id = i2d:axes\"); \n          r = Mediator.exec({id:'i2d:axes' , f:\"foo\", a:7});\n          if(check.undefined(r) || check.emptyObject(r)){\n            console.log(`!Mediator.exec:expected full object - r=${r}`);\n            failed++;\n          }\n\n          // test case3\n          tests++;\n          console.log(\"Mediator.exec: a = 'a' (single-value)\"); \n          r = Mediator.exec({t:'camera3d' , f:\"home\", a:'a'});\n          if(check.undefined(r)){\n            console.log(`!Mediator.exec:expected single object - r=${r}`);\n            failed++;\n          }\n\n          tests++;\n          console.log(\"Mediator.exec: a = ['a'] l=1\"); \n          let {a0} = Mediator.exec({t:'camera3d' , f:\"home\", a:['a']});\n          if(check.undefined(a0)){\n            console.log(`!Mediator.exec:expected defined element - a0=${a0}`);\n            failed++;\n          }\n\n          tests++;\n          console.log(\"Mediator.exec: a = ['a', 'b'] l=2\"); \n          let {b0,b1} = Mediator.exec({t:'camera3d' , f:\"home\", a:['a','b']});\n          if(check.undefined(b0) || check.undefined(b1)){\n            console.log(`!Mediator.exec:expected defined b0, b1`);\n            failed++;\n          }\n\n          tests++;\n          console.log(\"Mediator.exec: a = ['a', 'b', 'c'] l=3\"); \n          let {c0,c1,c2} = Mediator.exec({t:'camera3d' , f:\"home\", a:['a','b','c']});\n          if(check.undefined(c0) || check.undefined(c1) || check.undefined(c2)){\n            console.log(`Mediator.exec:expected defined c0, c1, c2`);\n            failed++;\n          }\n\n          tests++;\n          console.log(\"Mediator.exec: a = ['a', 'b', 'c', 'd'] l=4\"); \n          let {d0,d1,d2,d3} = Mediator.exec({t:'camera3d' , f:\"home\", a:['a','b','c','d']});\n          if(check.undefined(d0) || check.undefined(d1) || check.undefined(d2) || check.undefined(d3)){\n            console.log(`Mediator.exec:expected defined d0, d1, d2, d3`);\n            failed++;\n          }\n\n          tests++;\n          console.log(\"Mediator.exec: a = ['a', 'b', 'c', 'd', 'e'] l>4\"); \n          r = Mediator.exec({t:'camera3d' , f:\"home\", a:['a','b','c','d','e']});\n          if(check.undefined(r) || !Array.isArray(r)){\n            console.log(`Mediator.exec:expected array length>4 - r=${r}`);\n            failed++;\n          }\n\n          // report Mediator results \n          return {te:tests, f:failed};\n        },//mediator\n\n\n        // * Transform3d.apply - cases\n        t3d() {\n          var tests = 0,\n              failed = 0,\n              s = {s:[1,1,1]},\n              r = {e:[0,0,0]},\n              t = {t:[0,0,0]},\n              m,\n              mm,\n              v;\n\n          // transform3d tests:\n          // * NOTE: mm = (new THREE.Matrix4()).set(e0,e1,...,e15) takes arguments in\n          //   row-major order, i.e set(m11,m12,m13,m14,m21,...m44) (using math indices).\n          //   However, when a matrix is decomposed into elements, for example,\n          //   [a0,a1,a2,...,a15] = mm.elements, the a-array is in column-major order,\n          //   i.e [m11,m21,m31,m41,m12,...m44] (using math indices)\n          // * NOTE: 3x3 rotation matrices are from wikipedia:\n          //   https://en.wikipedia.org/wiki/Rotation_matrix\n      \n      \n          // tests 0 - identity\n          tests++;\n          mm = (new THREE.Matrix4()).set(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);\n          m = Transform3d.apply(s);   // s-id\n          if(Transform3d.verify(m, mm)){\n            console.log(\"s-id passes\");\n          }else{\n            console.log(\"!s-d fails\");\n            failed++;\n          }\n          tests++;\n          m = Transform3d.apply(r);   // r-id\n          if(Transform3d.verify(m, mm)){\n            console.log(\"r-id passes\");\n          }else{\n            console.log(\"!r-id fails\");\n            failed++;\n          }\n          tests++;\n          m = Transform3d.apply(t);   // t-id\n          if(Transform3d.verify(m, mm)){\n            console.log(\"t-id passes\");\n          }else{\n            console.log(\"!t-id fails\");\n            failed++;\n          }\n      \n      \n          // tests 1 - scale\n          tests++;\n          s = {s:[2,1,1]};            // sx \n          mm = (new THREE.Matrix4()).set(2,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);\n          m = Transform3d.apply(s);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"sx passes\");\n          }else{\n            console.log(\"!sx fails\");\n            failed++;\n          }\n          tests++;\n          s = {s:[1,2,1]};            // sy\n          mm = (new THREE.Matrix4()).set(1,0,0,0, 0,2,0,0, 0,0,1,0, 0,0,0,1);\n          m = Transform3d.apply(s);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"sy passes\");\n          }else{\n            console.log(\"!sy fails\");\n            failed++;\n          }\n          tests++;\n          s = {s:[1,1,2]};            // sz\n          mm = (new THREE.Matrix4()).set(1,0,0,0, 0,1,0,0, 0,0,2,0, 0,0,0,1);\n          m = Transform3d.apply(s);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"sz passes\");\n          }else{\n            console.log(\"!sz fails\");\n            failed++;\n          }\n      \n      \n      \n          // tests 2 - euler rotations\n          tests++;\n          r = {e:[0, 3.14159265, 0]};  // yaw1 PI\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"yaw1 m.v = \" + v);\n          mm = (new THREE.Matrix4()).set(-1,0,0,0, 0,1,0,0, 0,0,-1,0, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"yaw1 mm.v = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"yaw1 passes\");\n          }else{\n            console.log(\"!yaw1 fails\");\n            failed++;\n          }\n          tests++;\n          r = {e:[0, 1.5708, 0]};      // yaw2 PI/2\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"yaw2 m.v = \" + v);\n          mm = (new THREE.Matrix4()).set(0,0,1,0, 0,1,0,0, -1,0,0,0, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"yaw2 mm.v = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"yaw2 passes\");\n          }else{\n            console.log(\"!yaw2 fails\");\n            failed++;\n          }\n          tests++;\n          r = {e:[3.14159265,0, 0]};  // pitch1 PI\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"pitch1 m.v = \" + v);\n          mm = (new THREE.Matrix4()).set(1,0,0,0, 0,-1,0,0, 0,0,-1,0, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"pitch1 mm.v = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"pitch1 passes\");\n          }else{\n            console.log(\"!pitch1 fails\");\n            failed++;\n          }\n          tests++;\n          r = {e:[1.5708, 0, 0]};     // pitch2 PI/2\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"pitch2 m.v = \" + v);\n          mm = (new THREE.Matrix4()).set(1,0,0,0, 0,0,-1,0, 0,1,0,0, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"pitch2 mm.v = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"pitch2 passes\");\n          }else{\n            console.log(\"!pitch2 fails\");\n            failed++;\n          }\n          tests++;\n          r = {e:[0, 0, 3.14159265]}; // roll1 PI\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"roll1 m.el = \" + v);\n          mm = (new THREE.Matrix4()).set(-1,0,0,0, 0,-1,0,0, 0,0,1,0, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"roll1 mm.v = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"roll1 passes\");\n          }else{\n            console.log(\"!roll1 fails\");\n            failed++;\n          }\n          tests++;\n          r = {e:[0, 0, 1.5708]};     // roll2 PI/2\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"roll2 m.el = \" + v);\n          mm = (new THREE.Matrix4()).set(0,-1,0,0, 1,0,0,0, 0,0,1,0, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"roll2 mm.el = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"roll2 passes\");\n          }else{\n            console.log(\"!roll2 fails\");\n            failed++;\n          }\n      \n      \n      \n          // tests 3 - quaternion rotations\n          tests++;\n          r = {q:[0, 1, 0, 0]};  // yaw1-q PI\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"yaw1-q m.v = \" + v);\n          mm = (new THREE.Matrix4()).set(-1,0,0,0, 0,1,0,0, 0,0,-1,0, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"yaw1-q mm.v = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"yaw1-q passes\");\n          }else{\n            console.log(\"!yaw1-q fails\");\n            failed++;\n          }\n          tests++;\n          r = {q:[0, 0.707107, 0, 0.707107]};      // yaw2-q PI/2\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"yaw2-q m.v = \" + v);\n          mm = (new THREE.Matrix4()).set(0,0,1,0, 0,1,0,0, -1,0,0,0, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"yaw2-q mm.v = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"yaw2-q passes\");\n          }else{\n            console.log(\"!yaw2-q fails\");\n            failed++;\n          }\n          tests++;\n          r = {q:[1, 0, 0, 0]};  // pitch1-q PI\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"pitch1-q m.v = \" + v);\n          mm = (new THREE.Matrix4()).set(1,0,0,0, 0,-1,0,0, 0,0,-1,0, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"pitch1-q mm.v = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"pitch1-q passes\");\n          }else{\n            console.log(\"!pitch1-q fails\");\n            failed++;\n          }\n          tests++;\n          r = {q:[0.707107, 0, 0, 0.707107]};     // pitch2-q PI/2\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"pitch2-q m.v = \" + v);\n          mm = (new THREE.Matrix4()).set(1,0,0,0, 0,0,-1,0, 0,1,0,0, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"pitch2-q mm.v = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"pitch2-q passes\");\n          }else{\n            console.log(\"!pitch2-q fails\");\n            failed++;\n          }\n          tests++;\n          r = {q:[0, 0, 1, 0]};  // roll1-q PI\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"roll1-q m.el = \" + v);\n          mm = (new THREE.Matrix4()).set(-1,0,0,0, 0,-1,0,0, 0,0,1,0, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"roll1-q mm.v = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"roll1-q passes\");\n          }else{\n            console.log(\"!roll1-q fails\");\n            failed++;\n          }\n          tests++;\n          r = {q:[0, 0, 0.707107, 0.707107]};     // roll2-q PI/2\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"roll2-q m.el = \" + v);\n          mm = (new THREE.Matrix4()).set(0,-1,0,0, 1,0,0,0, 0,0,1,0, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"roll2-q mm.el = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"roll2-q passes\");\n          }else{\n            console.log(\"!roll2-q fails\");\n            failed++;\n          }\n      \n      \n      \n          // tests 4 - translation\n          tests++;\n          t = {t:[2,0,0]};            // tx\n          // m\n          m = Transform3d.apply(t);\n          v = m.elements;\n          //console.log(\"tx m.el = \" + v);\n          // mm\n          mm = (new THREE.Matrix4()).set(1,0,0,2, 0,1,0,0, 0,0,1,0, 0,0,0,1); //row-m \n          v = mm.elements;\n          //console.log(\"tx mm.el = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"tx passes\");\n          }else{\n            console.log(\"!tx fails\");\n            failed++;\n          }\n          tests++;\n          t = {t:[0,2,0]};\n          m = Transform3d.apply(t);   // ty\n          v = m.elements;\n          //console.log(\"ty m.el = \" + v);\n          mm = (new THREE.Matrix4()).set(1,0,0,0, 0,1,0,2, 0,0,1,0, 0,0,0,1); //row-m \n          v = mm.elements;\n          //console.log(\"ty m.el = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"ty passes\");\n          }else{\n            console.log(\"!ty fails\");\n            failed++;\n          }\n          tests++;\n          t = {t:[0,0,2]};            // tz\n          m = Transform3d.apply(t);\n          v = m.elements;\n          //console.log(\"tz m.el = \" + v);\n          mm = (new THREE.Matrix4()).set(1,0,0,0, 0,1,0,0, 0,0,1,2, 0,0,0,1); //row-m \n          v = mm.elements;\n          //console.log(\"tz m.el = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"tz passes\");\n          }else{\n            console.log(\"!tz fails\");\n            failed++;\n          }\n      \n      \n          // tests 5 - scale and translation\n          tests++;\n          t = {t:[2,0,0], s:[1,2,1]};            // tx, sy\n          // m\n          m = Transform3d.apply(t);\n          v = m.elements;\n          //console.log(\"tx m.el = \" + v);\n          // mm\n          mm = (new THREE.Matrix4()).set(1,0,0,2, 0,2,0,0, 0,0,1,0, 0,0,0,1); //row-m \n          v = mm.elements;\n          //console.log(\"tx mm.el = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"tx passes\");\n          }else{\n            console.log(\"!tx fails\");\n            failed++;\n          }\n          tests++;\n          t = {t:[0,2,0], s:[1,2,1]};            // ty, sy\n          m = Transform3d.apply(t);   // ty\n          v = m.elements;\n          //console.log(\"ty-sy m.el = \" + v);\n          mm = (new THREE.Matrix4()).set(1,0,0,0, 0,2,0,2, 0,0,1,0, 0,0,0,1); //row-m \n          v = mm.elements;\n          //console.log(\"ty-sy m.el = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"ty-sy passes\");\n          }else{\n            console.log(\"!ty-sy fails\");\n            failed++;\n          }\n          tests++;\n          t = {t:[0,0,2], s:[1,2,1]};            // tz, sy\n          m = Transform3d.apply(t);\n          v = m.elements;\n          //console.log(\"tz-sy m.el = \" + v);\n          mm = (new THREE.Matrix4()).set(1,0,0,0, 0,2,0,0, 0,0,1,2, 0,0,0,1); //row-m \n          v = mm.elements;\n          //console.log(\"tz-sy m.el = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"tz-sy passes\");\n          }else{\n            console.log(\"!tz-sy fails\");\n            failed++;\n          }\n      \n      \n      \n          // test6 - rotation-e and translation\n          tests++;\n          r = {t:[2,0,0], e:[0, 3.14159265, 0]};  // tx yaw1 PI\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"yaw1-tx m.v = \" + v);\n          mm = (new THREE.Matrix4()).set(-1,0,0,2, 0,1,0,0, 0,0,-1,0, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"yaw1-tx mm.v = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"yaw1-tx passes\");\n          }else{\n            console.log(\"!yaw1-tx fails\");\n            failed++;\n          }\n          tests++;\n          r = {t:[0,2,0], e:[0, 1.5708, 0]};      // ty yaw2 PI/2\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"yaw2-ty m.v = \" + v);\n          mm = (new THREE.Matrix4()).set(0,0,1,0, 0,1,0,2, -1,0,0,0, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"yaw2-ty mm.v = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"yaw2-ty passes\");\n          }else{\n            console.log(\"!yaw2-ty fails\");\n            failed++;\n          }\n          tests++;\n          r = {t:[0,0,2], e:[3.14159265,0, 0]};  // tz pitch1 PI\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"pitch1-tz m.v = \" + v);\n          mm = (new THREE.Matrix4()).set(1,0,0,0, 0,-1,0,0, 0,0,-1,2, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"pitch1-tz mm.v = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"pitch1-tz passes\");\n          }else{\n            console.log(\"!pitch1-tz fails\");\n            failed++;\n          }\n          tests++;\n          r = {t:[2,0,0], e:[1.5708, 0, 0]};     // tx pitch2 PI/2\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"pitch2-tx m.v = \" + v);\n          mm = (new THREE.Matrix4()).set(1,0,0,2, 0,0,-1,0, 0,1,0,0, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"pitch2-tx mm.v = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"pitch2-tx passes\");\n          }else{\n            console.log(\"!pitch2-tx fails\");\n            failed++;\n          }\n          tests++;\n          r = {t:[0,2,0], e:[0, 0, 3.14159265]}; // ty roll1 PI\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"roll1-ty m.el = \" + v);\n          mm = (new THREE.Matrix4()).set(-1,0,0,0, 0,-1,0,2, 0,0,1,0, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"roll1-ty mm.v = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"roll1-ty passes\");\n          }else{\n            console.log(\"!roll1-ty fails\");\n            failed++;\n          }\n          tests++;\n          r = {t:[0,0,2], e:[0, 0, 1.5708]};     // tz roll2 PI/2\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"roll2-tz m.el = \" + v);\n          mm = (new THREE.Matrix4()).set(0,-1,0,0, 1,0,0,0, 0,0,1,2, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"roll2-tz mm.el = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"roll2-tz passes\");\n          }else{\n            console.log(\"!roll2-tz fails\");\n            failed++;\n          }\n      \n      \n      \n          // test7 - rotation-q and translation\n          tests++;\n          r = {t:[2,0,0], q:[0, 1, 0, 0]};  // tx yaw1-q PI\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"yaw1-q-tx m.v = \" + v);\n          mm = (new THREE.Matrix4()).set(-1,0,0,2, 0,1,0,0, 0,0,-1,0, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"yaw1-q-tx mm.v = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"yaw1-q-tx passes\");\n          }else{\n            console.log(\"!yaw1-q-tx fails\");\n            failed++;\n          }\n          tests++;\n          r = {t:[0,2,0], q:[0, 0.707107, 0, 0.707107]};      // ty yaw2-q PI/2\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"yaw2-q-ty m.v = \" + v);\n          mm = (new THREE.Matrix4()).set(0,0,1,0, 0,1,0,2, -1,0,0,0, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"yaw2-q-ty mm.v = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"yaw2-q-ty passes\");\n          }else{\n            console.log(\"!yaw2-q-ty fails\");\n            failed++;\n          }\n          tests++;\n          r = {t:[0,0,2], q:[1, 0, 0, 0]};  // tz pitch1-q PI\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"pitch1-q-tz m.v = \" + v);\n          mm = (new THREE.Matrix4()).set(1,0,0,0, 0,-1,0,0, 0,0,-1,2, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"pitch1-q-tz mm.v = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"pitch1-q-tz passes\");\n          }else{\n            console.log(\"!pitch1-q-tz fails\");\n            failed++;\n          }\n          tests++;\n          r = {t:[2,0,0], q:[0.707107, 0, 0, 0.707107]};     // tx pitch2-q PI/2\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"pitch2-q-tx m.v = \" + v);\n          mm = (new THREE.Matrix4()).set(1,0,0,2, 0,0,-1,0, 0,1,0,0, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"pitch2-q-tx mm.v = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"pitch2-q-tx passes\");\n          }else{\n            console.log(\"!pitch2-q-tx fails\");\n            failed++;\n          }\n          tests++;\n          r = {t:[0,2,0], q:[0, 0, 1, 0]};  // ty roll1-q PI\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"roll1-q-ty m.el = \" + v);\n          mm = (new THREE.Matrix4()).set(-1,0,0,0, 0,-1,0,2, 0,0,1,0, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"roll1-q-ty mm.v = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"roll1-q-ty passes\");\n          }else{\n            console.log(\"!roll1-q-ty fails\");\n            failed++;\n          }\n          tests++;\n          r = {t:[0,0,2], q:[0, 0, 0.707107, 0.707107]};     // tz roll2-q PI/2\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"roll2-q-tz m.el = \" + v);\n          mm = (new THREE.Matrix4()).set(0,-1,0,0, 1,0,0,0, 0,0,1,2, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"roll2-q-tz mm.el = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"roll2-q-tz passes\");\n          }else{\n            console.log(\"!roll2-q-tz fails\");\n            failed++;\n          }\n      \n      \n      \n          // test8 - rotation-e and translation and scale\n          tests++;\n          r = {t:[2,0,0], e:[0, 3.14159265, 0], s:[1,1,2]};  // sz tx yaw1 PI\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"yaw1-tx-sz m.v = \" + v);\n          mm = (new THREE.Matrix4()).set(-1,0,0,2, 0,1,0,0, 0,0,-2,0, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"yaw1-tx-sz mm.v = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"yaw1-tx-sz passes\");\n          }else{\n            console.log(\"!yaw1-tx-sz fails\");\n            failed++;\n          }\n          tests++;\n          r = {t:[0,2,0], e:[0, 1.5708, 0], s:[2,1,1]};      // sx ty yaw2 PI/2\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"yaw2-ty-sx m.v = \" + v);\n          mm = (new THREE.Matrix4()).set(0,0,1,0, 0,1,0,2, -2,0,0,0, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"yaw2-ty-sx mm.v = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"yaw2-ty-sx passes\");\n          }else{\n            console.log(\"!yaw2-ty-sx fails\");\n            failed++;\n          }\n          tests++;\n          r = {t:[0,0,2], e:[3.14159265,0, 0], s:[1,2,1]};  // sy tz pitch1 PI\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"pitch1-tz-sy m.v = \" + v);\n          mm = (new THREE.Matrix4()).set(1,0,0,0, 0,-2,0,0, 0,0,-1,2, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"pitch1-tz-sy mm.v = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"pitch1-tz-sy passes\");\n          }else{\n            console.log(\"!pitch1-tz-sy fails\");\n            failed++;\n          }\n          tests++;\n          r = {t:[2,0,0], e:[1.5708, 0, 0], s:[1,1,2]};     // sz tx pitch2 PI/2\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"pitch2-tx-sz m.v = \" + v);\n          mm = (new THREE.Matrix4()).set(1,0,0,2, 0,0,-2,0, 0,1,0,0, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"pitch2-tx-sz mm.v = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"pitch2-tx-sz passes\");\n          }else{\n            console.log(\"!pitch2-tx-sz fails\");\n            failed++;\n          }\n          tests++;\n          r = {t:[0,2,0], e:[0, 0, 3.14159265], s:[2,1,1]}; // sx ty roll1 PI\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"roll1-ty-sx m.el = \" + v);\n          mm = (new THREE.Matrix4()).set(-2,0,0,0, 0,-1,0,2, 0,0,1,0, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"roll1-ty-sx mm.v = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"roll1-ty-sx passes\");\n          }else{\n            console.log(\"!roll1-ty-sx fails\");\n            failed++;\n          }\n          tests++;\n          r = {t:[0,0,2], e:[0, 0, 1.5708], s:[1,2,1]};     // sy tz roll2 PI/2\n          m = Transform3d.apply(r);\n          v = m.elements;\n          //console.log(\"roll2-tz-sy m.el = \" + v);\n          mm = (new THREE.Matrix4()).set(0,-2,0,0, 1,0,0,0, 0,0,1,2, 0,0,0,1);\n          v = mm.elements;\n          //console.log(\"roll2-tz-sy mm.el = \" + v);\n          if(Transform3d.verify(m, mm)){\n            console.log(\"roll2-tz-sy passes\");\n          }else{\n            console.log(\"!roll2-tz-sy fails\");\n            failed++;\n          }\n\n\n\n          // report Transform3d results \n          return {te:tests, f:failed};\n        }//t3d()\n      };//test\n\n\n\n  // Camera3d.lookAt - cases\n  if(test_c3d){\n    if(check.undefined(Camera3d)){\n      console.log('!unit_spec() Camera3d arg is not defined');\n    }else{ // test \n      let {te, f} = test.c3d();\n      tests += te;\n      failed += f;\n    }  \n  }\n\n  // Mixin.extend; Mixin.include; Mixin.extendAll; Mixin.includeAll;\n  if(test_mixin){\n    if(check.undefined(Mixin)){\n      console.log('!unit_spec() Mixin arg is not defined');\n    }else{ // test\n      let {te, f} = test.mixin();\n      tests += te;\n      failed += f;\n    }\n  }\n  // Mediator.emit, Mediator.exec - cases\n\n  if(test_mediator){\n    if(check.undefined(Mediator)){\n      console.log('!unit_spec() Mediator arg is not defined');\n    }else{ //test\n      let {te, f} = test.mediator();\n      tests += te;\n      failed += f;\n    }\n  }\n\n  // Transform3d.apply - cases\n  if(test_t3d){\n    if(check.undefined(Transform3d)){\n      console.log('!unit_spec() Transform3d arg is not defined');\n    }else{ // test\n      let {te, f} = test.t3d();\n      tests += te;\n      failed += f;\n    }\n  }\n\n\n  // report unit_test results\n  console.log(`*** unit test summary: \n                       ${tests} tests  \n                       ${failed} failures ***`); \n\n  // turn off config.unit_test\n  config.unit_test = false;\n\n\n  // return promise\n  return new Promise((resolve, reject) => {\n    if(failed === 0){\n      resolve();\n    }else{\n      reject(new Error(`${failed} failures`));\n    }\n  });\n};\n"],"file":"unit_spec.js","sourceRoot":"/source/"}