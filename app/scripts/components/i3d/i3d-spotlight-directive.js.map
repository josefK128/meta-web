{"version":3,"names":[],"mappings":"","sources":["components/i3d/i3d-spotlight-directive.js"],"sourcesContent":["// * i3d-spotlight-directive.js\n// * creates three.js component registered with Camera3d and added to scene<br>\n//   pass in params as attrs\n//\n// * @dependencies: Camera3d, Transform3d\n//   @param {services/camera3d-service.js} Camera3d\n//   @param {services/transform3d-service.js} Transform3d\n//   @param {services/log-service.js} Log\n//   @param {utils/colourToHex.js} colourToHex\n//   @ngInject\n//\n// * NOTE: ngInject is used by ngAnnotate to generate a \n//   minification-safe injection annotation such as:\n//   ```function($scope) => ['$scope', function($scope){}]```\n// * NOTE: $destroy occurs when the angular jQuery wrapper is destroyed.\n//   Thus the wrapper is removed from the DOM but not the 'raw' DOM element\n//   nor, more importantly, the webgl node in the underlying webgl scenegraph\n\n\nangular.module('app').directive(\"i3dSpotlight\", \n  [\"Camera3d\", \"Transform3d\", \"Log\", \"colourToHex\", function(Camera3d, Transform3d, Log, colourToHex){\n  \"use strict\";\n\n\n  // return DDO\n  return {\n    restrict: 'E',\n    scope: 'true',\n    replace: 'false',\n    templateNamespace: 'svg',\n    link: function(scope, elem, attrs){\n\n\n\n      // vars\n      var id = attrs.id,\n          p = scope.p || {},\n          pid = p.pid,\n          color = attrs.color || '#ffffff',\n          intensity = parseFloat(attrs.intensity || '1.0'),\n          distance = parseFloat(attrs.distance || '0.0'),\n          angle = parseFloat(attrs.angle || '1.047197551'), // PI/3\n          exponential = parseFloat(attrs.exponential || '10.0'), \n          targetx = parseFloat(attrs.targetx || '0.0'),\n          targety = parseFloat(attrs.targety || '0.0'),\n          targetz = parseFloat(attrs.targetz || '0.0'),\n          castShadow = (/true/i).test(attrs.castShadow || 'false'), // s->bool\n          shadowCameraNear = parseFloat(attrs.shadowCameraNear || '50.0'), \n          shadowCameraFar = parseFloat(attrs.shadowCameraFar || '5000.0'), \n          shadowCameraFOV = parseFloat(attrs.shadowCameraFOV || '50.0'), \n          shadowBias = parseFloat(attrs.shadowBias || '0.0'), \n          shadowDarkness = parseFloat(attrs.shadowDarkness || '0.5'), \n          shadowMapWidth = parseFloat(attrs.shadowMapWidth || '512'), \n          shadowMapHeight = parseFloat(attrs.shadowMapHeight || '512'), \n          transform = JSON.parse(attrs.transform || '{}'),\n          light;\n\n\n      // clear and set $scope.p.pid = id for subsequent children<br>\n      // $scope.p is a different object for each level \n      scope.p = {};\n      scope.p.pid = id;\n\n\n      // convert color name to hex for use in three.js material\n      if(!/^(#|0x)/.test(color)){\n        color = colourToHex(color);\n      }\n\n      // light, direction, angle, shadow\n      light = new THREE.SpotLight(color);\n      light.intensity = intensity;\n      light.distance = distance;\n      light.angle = angle;\n      light.exponential = exponential;\n      light.castShadow = castShadow;\n      light.shadowCameraNear = shadowCameraNear;\n      light.shadowCameraFar = shadowCameraFar;\n      light.shadowCameraFOV = shadowCameraFOV;\n      light.shadowBias = shadowBias;\n      light.shadowDarkness = shadowDarkness;\n      light.shadowMapWidth = shadowMapWidth;\n      light.shadowMapHeight = shadowMapHeight;\n\n\n\n      // add the Object3D to the scene and store in Camera3d actors by id\n      Camera3d.addActorToScene(id, light, pid);\n\n      // transform light - relative to parent in THREE.js scene !!!\n      Transform3d.apply(transform, light);\n\n      // target\n      light.target.position.set(targetx,targety,targetz);\n      //light.lookAt(Camera3d.actor['scene'].position); // just in case\n\n\n\n      // cleanup\n      elem.on(\"$destroy\", function() {\n        //Camera3d.removeActorFromScene(id);\n        //scope = null;\n      });\n    }//link-f\n  };//return DDO\n}]);\n\n"],"file":"components/i3d/i3d-spotlight-directive.js","sourceRoot":"/source/"}