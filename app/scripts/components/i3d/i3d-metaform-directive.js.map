{"version":3,"names":[],"mappings":"","sources":["components/i3d/i3d-metaform-directive.js"],"sourcesContent":["// * i3d-metaform-directive.js\n// * initiates the creation of a three.js component tree from JSON model<br>\n//   individual nodes are managed by their specific directives<br>\n//   pass in params as attrs\n//\n// * @dependencies: Camera3d, Transform3d<br>\n//   @param {services/camera3d-service.js} Camera3d<br>\n//   @param {services/transform3d-service.js} Transform3d<br>\n//   @param {services/log-service.js} Log<br>\n//   @param {utils/colourToHex.js} colourToHex<br>\n//   @ngInject\n//\n// * NOTE: ngInject is used by ngAnnotate to generate a \n//   minification-safe injection annotation such as:\n//   ```function($scope) => ['$scope', function($scope){}]```\n//\n// * NOTE: may be used maintain tree of metaform DOM nodes indexed abstractly\n//   by level and child index<br>\n//   exp: '0_1_0' is the zeroth child of the first child of root<br>\n//   delimiter is underscore - level is 2 (root-0, next 1, leaf 2)\n// * NOTE: in present form not used for anything essential, but could\n//   be useful in future - exp. root for DOM tree manipulations\n\n\nangular.module('app').directive(\"i3dMetaform\", [\"Mediator\", \"Camera3d\", function(Mediator, Camera3d){\n  \"use strict\";\n\n\n  class Metaform {\n    constructor(){\n      this.id = \"\";\n    }\n  }\n\n\n  // return DDO\n  return {\n    restrict: 'E',\n    scope: 'false',\n    replace: 'false',\n    templateNamespace: 'svg',\n    controller: Metaform,\n    controllerAs: 'metaform',\n    bindToController: true,\n    link: function(scope, elem, attrs, metaform){\n\n\n\n      // root id from model\n      metaform.id = attrs.id;                       \n      metaform.pid = attrs.pid;\n      scope.p = {};\n      scope.p.pid = metaform.pid;\n\n      // register component controller\n      Mediator.component(metaform.id, metaform); \n\n    }//link-f\n  };//return DDO\n}]);\n\n"],"file":"components/i3d/i3d-metaform-directive.js","sourceRoot":"/source/"}