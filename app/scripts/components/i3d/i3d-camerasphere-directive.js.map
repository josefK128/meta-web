{"version":3,"names":[],"mappings":"","sources":["components/i3d/i3d-camerasphere-directive.js"],"sourcesContent":["// * i3d-camerasphere-directive.js\n// * creates three.js component registered with Camera3d and added to scene\n//   pass in params as attrs\n//\n// * @dependencies: Camera3d, Transform3d<br>\n//   @param {services/camera3d-service.js} Camera3d<br>\n//   @param {services/transform3d-service.js} Transform3d<br>\n//   @param {services/log-service.js} Log<br>\n//   @param {utils/colourToHex.js} colourToHex<br>\n//   @ngInject\n//\n// * NOTE: ngInject is used by ngAnnotate to generate a \n//   minification-safe injection annotation such as:\n//   ```function($scope) => ['$scope', function($scope){}]```\n//\n// * NOTE: csphere has no parent in scenegraph (other than 'root') so\n//   local csphere.matrix === csphere.matrixWorld (world) and\n//   csphere.matrixUpdate = true so csphere.matrix (=csphere.matrixWorld)\n//   is updated for every transform of csphere.\n// * NOTE: $destroy occurs when the angular jQuery wrapper is destroyed.\n//   Thus the wrapper is removed from the DOM but not the 'raw' DOM element\n//   nor, more importantly, the webgl node in the underlying webgl scenegraph\n\n\nangular.module('app').directive(\"i3dCamerasphere\", [\"Camera3d\", \"Transform3d\", \"Log\", \"colourToHex\", function(Camera3d,\n  Transform3d, Log, colourToHex){\n  \"use strict\";\n\n\n  // return DDO\n  return {\n    restrict: 'E',\n    scope: 'true',\n    replace: 'false',\n    templateNamespace: 'svg',\n    link: function(scope, elem, attrs){\n\n\n\n      // diagnostics\n      //for(let p of Object.keys(attrs)){\n      //}\n\n      // vars\n      var id = attrs.id,\n          p = scope.p || {},\n          pid = p.pid,\n          form,\n          radius,\n          visible,\n          color,\n          wireframe,\n          transparent,\n          opacity,\n          transform,\n          sphereGeometry,  \n          sphereMaterial,\n          csphere;\n\n\n      // clear and set $scope.p.pid = id for subsequent children<br>\n      // $scope.p is a different object for each level \n      scope.p = {};\n      scope.p.pid = id;\n\n\n      // evaluations/defaults\n      form = JSON.parse(attrs.form || '{}');\n      radius = form.r || 50.0;\n      visible = form.visible;\n      color = form.color || 'green';\n      wireframe = form.wireframe || false;\n      transparent = form.transparent || true;\n      opacity = form.opacity || 1.0;\n      transform = JSON.parse(attrs.transform || '{}');\n\n\n      // convert color name to hex for use in three.js material\n      if(!/^(#|0x)/.test(color)){\n        color = colourToHex(color);\n      }\n\n\n      // attrs.i3d:~ are all strings!<br>\n      // strings do NOT work as boolean values in Material - convert to b!\n      visible = (/true/i).test(visible);\n      transparent = (/true/i).test(transparent);\n      wireframe = (/true/i).test(wireframe);\n\n      // create sphere geometry\n      // [1] SphereGeometry(radius, widthSegments, heightSegments, \n      //   phiStart, phiLength, thetaStart, thetaLength)\n      //   defaults: wS=8 (min=3), hS=9 (min=2), phiS=0, phiL=2PI, tS=0, tL=PI)\n      sphereGeometry = new THREE.SphereGeometry(radius);\n\n      // [2] MeshBasicMaterial\n      sphereMaterial = new THREE.MeshBasicMaterial({\n        visible: visible, \n        transparent: transparent,\n        opacity: opacity,\n        wireframe: wireframe, \n        color: color});\n\n\n      // mesh\n      csphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n      csphere.material.side = THREE.DoubleSide;  // default=FrontSide\n      \n      // position the camera-sphere - can alter bt non-trivial transform\n      csphere.position.x = 0.0;\n      csphere.position.y = 0.0;\n      csphere.position.z = 0.0;\n\n      // attach Camera3d.camera as child of csphere and set its\n      // position on the surface of csphere in the positive-z direction\n      // from the center of csphere.position (i.e at radius distance\n      // in the positive-z direction). Thus:<br>\n      // Camera3d.camera.position.x = csphere.position.x<br>\n      // Camera3d.camera.position.y = csphere.position.y<br>\n      // Camera3d.camera.position.z = csphere.position.z + radius<br>\n      // Finally: Camera3d.camera.lookAt(csphere.position) - center of csphere\n      Camera3d.attachAsSurfaceChild(csphere, radius);\n  \n      // add the Object3d to the scene and store in Camera3d actors by id\n      Camera3d.addActorToScene(id, csphere, pid);\n  \n      // transform cube - relative to parent in THREE.js scene !!!\n      Transform3d.apply(transform, csphere);\n\n\n      // cleanup\n      elem.on(\"$destroy\", function() {\n        //Camera3d.removeActorFromScene(id);\n        //scope = null;\n      });\n    }//link-f\n  };//return DDO\n}]);\n\n"],"file":"components/i3d/i3d-camerasphere-directive.js","sourceRoot":"/source/"}