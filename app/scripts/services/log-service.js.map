{"version":3,"names":[],"mappings":"","sources":["services/log-service.js"],"sourcesContent":["// * log-service.js\n// * writes a log message to a server on socket.io channel 'log' via Mediator \n// \n// * @dependencies: Mediator, config <br>\n//   @param {index.html} Angular object value 'config' <br>\n//   @ngInject\n// \n// * NOTE: ngInject is used by ngAnnotate to generate a \n//   minification-safe injection annotation such as: \n//   ```function($scope) => ['$scope', function($scope){}]```\n// \n// * NOTE: Log should preferably log objects - action format is a good choice: \n//   actions have the form:\n//   ```{t:target-object, f:function, a:args}``` \n//   Logs can benefit from a linguistic analog: ```{t: noun, f:verb, a:*}``` \n//   In simplest vanilla form strings can be logged as ```{a: string}``` \n//   This simple practice enables future linguistic-semantic log-search, \n//   log-query and log-statistics tools \n\n\nangular.module('app').factory('Log', [\"config\", function(config){\n  \"use strict\";\n\n  var log,\n      mediator;\n\n\n  class Log {\n    constructor(){}\n\n    // action is string-msg or action-object\n    log(action){\n      if(config.log){\n        mediator.emit('log', action);\n      }\n    }\n\n    set_mediator(o){\n      mediator = o;\n    }\n  }\n\n  // return factory object <br>\n  // (redundant) maintenance of Singleton\n  if(!log){\n    log = new Log();  // create Log singleton instance once\n  }\n  return log;         // return Log singleton instance\n}]);\n"],"file":"services/log-service.js","sourceRoot":"/source/"}