{"version":3,"names":[],"mappings":"","sources":["services/models-service.js"],"sourcesContent":["// * models-service.js\n// * returns stored model objects - presently loaded within the 'universe'\n// of templates, models and assets accessible in the application namespace\n//\n// * @dependencies: config<br>\n//   @param {index.html} Angular object value 'config'<br>\n//   @ngInject\n//\n// * NOTE: ngInject is used by ngAnnotate to generate a \n//   minification-safe injection annotation such as:\n//   ```function($scope) => ['$scope', function($scope){}]```\n// * @TODO return model as Promise\n// * @TODO: if model is not cached locally request it via Mediator ws-channel\n\n\nangular.module('app').factory(\"Models\", [\"config\", function(config){\n  \"use strict\";\n\n  var models;\n\n\n  // ```this.models``` is a collection of named data descriptors for creating views<br>\n  // Each model is associated with a template which can have many models<br>\n  // The models 'universe' and associations with templates is composed in \n  // a named angular value object 'config' defined in index.html\n  class Models {\n    constructor() {\n      this.models = config.models;\n    }\n \n    // fetch model by name<br>\n    // Expect name = template:model where model is almost always defined <br>\n    // If model is not defined return the single unnamed model for the template<br>\n    // If model is defined return the specific named model (from >=2) for the template<br>\n    // If no type or template or named model return {}\n    get(type, template, model){\n      if(this.models[type] && template){\n        if(this.models[type][template]){\n          if(this.models[type][template][model]){\n            return this.models[type][template][model]; // one of many this.models for tpl\n          }else{\n            return this.models[type][template]; // single model for template \n          }\n        }else{\n          return {};\n        }\n      }\n      return {};\n    } \n\n\n    // cache template model for future fetch<br>\n    // ```this.models[type][template][model] = o;```\n    put(type, template, model, o){\n      if(this.models[type]){\n        if(template){\n          if(model){\n            // one of many this.models for tpl\n            this.models[type][template][model] = o || {}; \n          }else{\n            // single model for template \n            this.models[type][template] = o || {};\n          }\n        }else{\n          throw \"template-name MUST be provided!\";\n        }\n      }else{\n        throw `this.models[${type}] does NOT exist!`;\n      }\n    } // caches model for future local fetch\n  }//Models\n\n\n  // return factory object<br>\n  // (redundant) maintenance of Singleton\n  if(!models){\n    models = new Models();  // create Models singleton instance\n  }\n  return models;            // return Models singleton instance\n}]);\n\n\n"],"file":"services/models-service.js","sourceRoot":"/source/"}