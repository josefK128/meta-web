{"version":3,"names":[],"mappings":"","sources":["services/mockserver-service.js"],"sourcesContent":["// * mockserver-service.js\n// * simulates studio broadcast of an action sequence 'score' \n//\n// * @dependencies: Mediator, Log, config, GSAP modules\n//   @param {app/services/mediator-service} Mediator<br>\n//   @param {app/services/log-service} Log<br>\n//   @param {index.html} Angular object value 'config'<br>\n//   @param {GSAP TweenMax} TimelineMax, TweenMax, Quad<br>\n//   @ngInject<br>\n//\n// * NOTE: ngInject is used by ngAnnotate to generate a \n//   minification-safe injection annotation such as:\n//   ```function($scope) => ['$scope', function($scope){}]```\n//\n// * NOTE: action sequence managed as GSAP timeline\n// * NOTE: action sequence can be interspersed with interactive camera\n//   and both sequence and added interactive shots can be recorded (@server)\n// * NOTE: Mockserver used iff config.mockserver_connect: true\n// * NOTE: to start action sequence hit 'alt-3'\n\n\nangular.module('app').factory('Mockserver', [\"Mediator\", \"Log\", \"config\", \"TimelineMax\", \"TweenMax\", \"Quad\", function(Mediator, Log, config,\n  TimelineMax, TweenMax, Quad){\n  \"use strict\";\n\n  var mockserver,      // closure vars - usable in any execution context\n      log = Log.log,\n      target = {p:0},  // mock animation target with mock tween property\n      timeline,\n      // timeline ctor properties \n      tlp = {repeat:0, paused:true, tweens:[]},  // -1 => loop, 0 => no repeat\n      delay = function* (){  // generator function for delays\n        let curr = -5;\n        for (;;) {\n          curr = curr + 10 + 5*Math.random();\n          yield curr;\n        }\n      },\n      index = 0,\n\n      // expand as desired - in this case like an animation test\n      // * NOTE: There are three narrative methods which lead to a new url\n      //   and therefore a new application state:\n      //   ```javascript\n      //      narrative.shot(template-name:JSON-model)``` <or><br>\n      //      narrative.shot(template-name:model-name) <br>\n      //      narrative.change_scene(scenename) <br>\n      //      narrative.change_state(absolute_url) <or><br>\n      //      narrative.change_state(delta_url) <br>\n      // * NOTE - do NOT use ```location.url(delta_url)``` - internal ONLY!\n      actions_scene_shot = [\n        {t:'camera3d', f:'panflyTo', a:{r:-0.7854, d:3}},\n        {t:'camera3d', f:'lookAt'},  \n        {t:'camera3d', f:'panflyTo', a:{r:-0.7854, d:3}},\n        {t:'camera3d', f:'home', a:{d:3}},  \n        {t:'camera3d', f:'panflyTo', a:{r:0.0, d:3}},\n        {t:'narrative', f:'change_scene', a:'a'},\n        {t:'narrative', f:'change_scene', a:'a0'},\n        {t:'narrative', f:'change_scene', a:'a1'},\n        {t:'narrative', f:'change_scene', a:'a2'},\n        {t:'camera3d', f:'dollyflyTo', a:{x:10, y:10, z:-20, d:4}},\n        {t:'narrative', f:'change_scene', a:'payments'},\n        {t:'camera3d', f:'toggle_csphere', a:{val:false}},\n        {t:'camera3d', f:'toggle_csphere', a:{val:true}},\n        {t:'camera3d', f:'toggle_light', a:{name:'key', val:false}},\n        {t:'camera3d', f:'toggle_light', a:{name:'fill', val:false}},\n        {t:'camera3d', f:'toggle_light', a:{name:'back', val:false}},\n        {t:'camera3d', f:'toggle_light', a:{name:'key', val:true}},\n        {t:'camera3d', f:'toggle_light', a:{name:'fill', val:true}},\n        {t:'camera3d', f:'toggle_light', a:{name:'back', val:true}},   // 19\n\n        {t:'narrative', f:'change_scene', a:'a'},\n        {t:'narrative', f:'shot', a:`shot-graft:${growa0json}`},\n        {t:'narrative', f:'shot', a:`shot-graft:${growa1json}`},\n        {t:'narrative', f:'shot', a:`shot-graft:${growa2json}`},\n        {t:'camera3d', f:'panflyTo', a:{r:0.7854, d:4}},\n\n        {t:'narrative', f:'change_scene', a:'footprint'},\n        {t:'camera3d', f:'panflyTo', a:{r:0.7854, d:4}},\n        {t:'camera3d', f:'tiltflyTo', a:{r:0.7854, d:4}},\n        {t:'camera3d', f:'billboardsFaceCamera'},  \n        {t:'camera3d', f:'tiltflyBy', a:{r:-0.7854, d:4}},\n        {t:'camera3d', f:'panflyBy', a:{r:-0.7854, d:4}},\n\n        {t:'narrative', f:'change_scene', a:'circle'},\n        {t:'narrative', \n         f:'change_state',\n         a:'/circle:/i3d-simple:simple_red/i2d-scene:mf2d0/base-skycube:test_cube/ui-msgbg:/shot-fixed:'},\n        {t:'narrative', f:'change_scene', a:'stocks'},\n        {t:'narrative', f:'change_state', a:'///i2d-scene:mf2d0///shot-fixed:'},\n        {t:'camera3d', f:'panflyBy', a:{r:-0.7854, d:4}}               // 16\n      ],\n\n      actions2d = [\n        {t:'camera2d', f:'zoomflyBy', a:{s:0.9, d:3}},\n        {t:'camera2d', f:'zoomflyTo', a:{s:2.0, d:3}},\n        {t:'camera2d', f:'zoomflyTo', a:{s:0.5, d:3}},\n        {t:'camera2d', f:'dollyflyTo', a:{x:20, d:3}},\n        {t:'camera2d', f:'center', a:{d:3}},  \n        {t:'camera2d', f:'home', a:{d:3}},    \n        {t:'camera2d', f:'rollflyTo', a:{r:-90, d:3}},\n        {t:'camera2d', f:'rollflyBy', a:{r:45, d:3}},\n        {t:'camera2d', f:'rollflyBy', a:{r:45, d:3}},\n        {t:'camera2d', f:'dollyflyTo', a:{x:20, d:3}},\n        {t:'camera2d', f:'dollyflyTo', a:{y:20, d:3}},\n        {t:'camera2d', f:'dollyflyTo', a:{x:0, d:3}},\n        {t:'camera2d', f:'dollyflyTo', a:{y:-40, d:3}},\n        {t:'camera2d', f:'dollyflyTo', a:{x:20, d:3}},\n        {t:'camera2d', f:'dollyflyTo', a:{x:0, d:3}},                  // 15\n        // camera2d.bezier will always fail because it constructs path and\n        // control points via Math.random() - non-repeatable\n        //{t:'camera2d', f:'bezier'},\n      ],\n\n      actions3d = [\n        {t:'camera3d', f:'tiltflyTo', a:{r:-0.7854, d:3}},\n        {t:'camera3d', f:'panflyTo', a:{r:-0.7854, d:3}},\n        {t:'camera3d', f:'lookAt'},  \n        {t:'camera3d', f:'dollyflyTo', a:{x:20, y:0, z:0, d:3}},\n        {t:'camera3d', f:'zoomflyTo', a:{s:0.5, d:3}},\n        {t:'camera3d', f:'zoomflyTo', a:{s:2.0, d:3}},\n        {t:'camera3d', f:'dollyflyTo', a:{x:20, y:20, z:-20, d:3}},\n        {t:'camera3d', f:'zoomflyTo', a:{s:0.5, d:3}},\n        {t:'camera3d', f:'center', a:{d:3}},\n        {t:'camera3d', f:'home', a:{d:3}},                             // 10\n        // camera3d.bezier will always fail because it constructs path and\n        // control points via Math.random() - non-repeatable\n        //{t:'camera3d', f:'bezier'},\n        {t:'camera3d', f:'panflyBy', a:{r:0.7854, d:3}},\n        {t:'camera3d', f:'tiltflyBy', a:{r:0.7854, d:3}},\n        {t:'camera3d', f:'lookAt'},\n        {t:'camera3d', f:'rollflyTo', a:{r:-1.57, d:4}},\n        {t:'camera3d', f:'rollflyBy', a:{r:0.3927, d:4}},\n        {t:'camera3d', f:'rollflyBy', a:{r:0.3927, d:4}},\n        {t:'camera3d', f:'center', a:{d:3}},\n        {t:'camera3d', f:'yawflyTo', a:{r:1.57, d:3}},\n        {t:'camera3d', f:'yawflyBy', a:{r:-0.7854, d:3}},\n        {t:'camera3d', f:'yawflyBy', a:{r:-0.7854, d:3}},\n        {t:'camera3d', f:'pitchflyTo', a:{r:-1.57, d:3}},\n        {t:'camera3d', f:'pitchflyBy', a:{r:0.7854, d:3}},\n        {t:'camera3d', f:'pitchflyBy', a:{r:0.7854, d:3}},\n        {t:'camera3d', f:'dollyflyTo', a:{x:20, y:-20, z:-30, d:3}},\n        {t:'camera3d', f:'dollyflyTo', a:{x:0, y:0, z:30, d:6}},\n        {t:'camera3d', f:'tiltflyBy', a:{r:0.7854, d:3}},\n        {t:'camera3d', f:'zoomflyTo', a:{s:2.0, d:3}},\n        {t:'camera3d', f:'home', a:{d:3}},\n        {t:'narrative', f:'change_scene', a:'payments'},\n        {t:'narrative', f:'change_state', a:'///i2d-scene:mf2d0///shot-fixed:'},\n        {t:'camera3d', f:'panflyBy', a:{r:-0.7854, d:4}},  \n        {t:'camera3d', f:'tiltflyBy', a:{r:-0.7854, d:4}},\n        {t:'narrative', f:'change_state', a:'////base-skycube:test_bg//'},\n        {t:'camera3d', f:'panflyTo', a:{r:0.7854, d:4}},\n        {t:'narrative', f:'change_state', a:'////base-skycube:no-anim//{}'},\n        {t:'camera3d', f:'zoomflyBy', a:{s:0.3, d:4}},\n        {t:'camera3d', f:'center', a:{d:3}},\n        {t:'camera3d', f:'home', a:{d:3}},                             \n        {t:'narrative', f:'change_state', a:'////videocam://shot-fixed:'} // 29\n      ],\n      actions = [];\n\n\n      // e2e_test or custom actions-sequence (composed from above subsets)\n      if(config.e2e_test){\n        // config.e2e_spec is an array of spec-objects each containing an action\n        for(let s of config.e2e_spec){\n          actions.push(s.action);\n        }\n      }else{\n        // set or chain-concat action sub-seqs as desired\n        actions = actions.concat(actions_scene_shot).concat(actions2d).concat(actions3d); // 80\n        //actions = actions.concat(actions_scene_shot); // 21\n        //actions = actions.concat(actions_scene_shot).concat(actions2d); // 50\n        //actions = actions.concat(actions3d); // 38 \n        \n        // test of narrative.change_state guards:\n        // shot-fixed:{} -> shot-fixed:\n        // {} -> shot-fixed:\n        //actions = [ {t:'narrative', f:'change_scene', a:'stocks'},\n        //{t:'narrative', f:'change_state', a:'///i2d-scene:mf2d0///shot-fixed:{}'},\n        //{t:'narrative', f:'change_state', a:'////base-skycube:no-anim//{}'}]\n      }\n\n\n\n  class Mockserver {\n    constructor(){\n    }//ctor\n\n    // functions\n    // start score\n    start(){\n      timeline.play();\n    }\n\n    // send score actions to queue for exec\n    queue(action){\n      Mediator.queue.push(action);\n    }\n  }//Mockserver\n\n\n  // return factory object<br>\n  // (redundant) maintenance of Singleton\n  if(!mockserver){\n    mockserver = new Mockserver(); // create Mockserver singleton instance once\n\n\n    // generate timeline\n    for (let n of delay()) {\n      // create one tween for each action<br> \n      // the action is set to be called in the tween onComplete handler\n      if(index >= actions.length){\n        timeline = new TimelineMax(tlp);\n        break;\n      }\n                \n      // simulate action stream<br> \n      // ```onComplete: mockserver.queue```<br>\n      // ```onCompleteParams: [{action}]```\n      tlp.tweens.push(TweenMax.to(target, 5, {p:0, \n         delay:n,\n         immediateRender:false,\n         onComplete: mockserver.queue,\n         onCompleteParams: [actions[index]]\n        }));\n      index += 1;\n    }\n  }\n  return mockserver;         // return Mockserver singleton instance\n}]);\n\n\n\n"],"file":"services/mockserver-service.js","sourceRoot":"/source/"}