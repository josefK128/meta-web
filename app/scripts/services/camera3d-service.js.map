{"version":3,"names":[],"mappings":"","sources":["services/camera3d-service.js"],"sourcesContent":["// * camera3d-service.js\n// * interactive controls for 3d perspective camera with pan-tilt-roll viewing \n//   and which is mounted at a surface point of a dollying rotating and zooming\n//   'camerasphere' which carries attached lights (default key, fill, back)<br> \n//   Also provides registration and lookup of all 3d actors by name,\n//   and insertion of actors into webgl scenegraph hierarchies by parent id\n//\n// * @dependencies: narrative, mediator, params services, GSAP modules, config<br>\n//   @param {angular.$rootScope} $rootScope <br>\n//   @param {angular.$timeout} $timeout   <br>\n//   @param {app/services/log-service} Log<br>\n//   @param {created in index.html initialization script} config<br>\n//   @param {GSAP} TweenMax<br>\n//   @param {GSAP} TimelineMax<br>\n//   @param {GSAP} Quad<br>\n//   @ngInject<br>\n//\n// * NOTE: ngInject is used by ngAnnotate to generate a \n//   minification-safe injection annotation such as:\n//   ```function($scope) => ['$scope', function($scope){}]```\n// \n// * NOTE: camera can 'lookAt' arbitrary points and arbitrary actors by id\n// * NOTE: keeps a separate 'billboard' subset of actors able to be oriented \n// * continually to face the camera\n// * NOTE: place() injects canvasId and stateDescriptor and possible non-default\n//   values for (optional) procedurally created scene, clearColor and alpha\n\n\nangular.module('app').service('Camera3d', [\"$rootScope\", \"$timeout\", \"Log\", \"config\", \"TweenMax\", \"TimelineMax\", \"Quad\", function($rootScope, $timeout, \n  Log, config, TweenMax, TimelineMax, Quad){\n  \"use strict\";\n\n  var camera3d,\n\n      // closure vars so 'this.f' calls inside Med/Nar are correct<br>\n      // if this.med/nar wer instance vars of camera3d 'this' would be Camera3d\n      mediator,  \n      narrative,\n\n      // same motivation in key handlers (this = window)<br>\n      // this.record_shots would be undefined in key handlers\n      record_shots = config.record_shots,\n      log = Log.log;\n\n\n  // other closure vars for camera\n  var canvas;\n  var gl;\n  // ref to THREE.PerspectiveCamera\n  var camera;          \n  // parent of camera - 'csphere' injected by attachAsSurfaceChild(csphere, r) \n  var csphere;         \n  var renderer;        // THREE.WebGLRenderer\n  var clearColor;\n  var alpha;\n  var aspect;          // w.innerW/w.innerH - for dollyXTo translation factor\n  var fov = 90.0;      // default - can be set by Camera3d.place()\n  var radius = 50.0;   // default camera z-distance set by radius of csphere \n  var zoom = 1.0;      // zoom - dynamic tracking\n  var roll = 0.0;      // roll - dynamic tracking\n  var pan = 0.0;       // pan - dynamic tracking\n  // by default the camera looks at the csphere center - pan/tilt look away\n  var tilt = 0.0;      // tilt - dynamic tracking\n  var yaw = 0.0;       // examine-yaw (rotation of csphere around y-axis)\n  var pitch = 0.0;     // examine-pitch (rotation of csphere around x-axis)\n                  \n  // scene, actors\n  var scene;           // NOTE: on scene-change scene is overwritten with new\n  var prev_scene;      // save a copy of the 'prev' scene for actor removal\n  var billboardsFace = false;  // true => billboards lookAt camera (world pos)\n  var billboardsTarget = new THREE.Vector3(); // world position of camera\n  // actors and bbs are registered & added to scene by addActorToScene(id,o,pid)\n  var billboards = {}; // hash of objects with keys directive id, i.e 'name'\n  var actors = {};     // hash of objects with keys directive id\n                     \n  // fps meter\n  var stats = null;\n\n  // Vector3\n  var x_axis = new THREE.Vector3(1.0, 0.0, 0.0);\n  var y_axis = new THREE.Vector3(0.0, 1.0, 0.0);\n\n  // 4x4 matrices in column-order(!)<br>\n  // dynamic copy of csphere.matrix\n  var csphere_matrix = new THREE.Matrix4();\n  // tmp matrices used in diagnostics transforms and diagnostics\n  var matrix = new THREE.Matrix4();\n  var matrixa = new THREE.Matrix4();\n  var matrixb = new THREE.Matrix4();\n  var matrixc = new THREE.Matrix4();\n  var matrixz = new THREE.Matrix4();\n  var rotation_matrix; // string for CSS3d matrix3d transform of div id 'i2d'\n  var report_matrix = false;\n\n\n\n\n  // diagnostics utility functions - camera world information\n  var report_camera_world = function(report_matrix){ \n      var cam_wp = new THREE.Vector3(),\n          key_wp = new THREE.Vector3(),\n          fill_wp = new THREE.Vector3(),\n          cam_up,\n          i;\n \n      cam_wp.setFromMatrixPosition(camera.matrixWorld);\n      cam_up = csphere.localToWorld(camera.up); // destroys local camera.up !\n  };\n\n  // camera information\n  var report_camera = function(report_matrix){\n      var i;\n      console.log(\"camera.fov is: \" + camera.fov);\n      console.log(\"camera.position is: \");\n      console.log(\"x = \" + camera.position.x);\n      console.log(\"y = \" + camera.position.y);\n      console.log(\"z = \" + camera.position.z);\n      console.log(\"camera.rotation is: \");\n      console.log(\"x = \" + camera.rotation.x);\n      console.log(\"y = \" + camera.rotation.y);\n      console.log(\"z = \" + camera.rotation.z);\n      console.log(\"camera.rotation._order is: \" + camera.rotation._order);\n      console.log(\"camera.up is: \");\n      console.log(\"x = \" + camera.up.x);\n      console.log(\"y = \" + camera.up.y);\n      console.log(\"z = \" + camera.up.z);\n      if(report_matrix){\n        console.log(\"camera.matrix (in column-order): \");\n        for(i=0; i<camera.matrix.elements.length; i++){\n          console.log(\"camera.matrix.e[\" + i + \"] = \" + \n            camera.matrix.elements[i]);\n        }\n      }\n  };\n\n  // examine information from o3d.matrix - local matrix unless world=true\n  // in which case examines o3d.matrixWorld\n  // * NOTE: if o3d has no object parent (i.e is at the root of the scenegraph)\n  //   then o3d.matrix === o3d.matrixWorld<br>\n  //   This is true for csphere (camerasphere) for example<br>\n  // reports:<br>\n  //   translation Vector3<br>\n  //   rotation    Quaternion<br>\n  //   scalar      Vector3\n  var examine_matrix = function(m){\n    for(var i=0; i<16; i++){\n      console.log(\"m[\" + i + \"] = \" + m[i]);\n    }\n\n    var t = new THREE.Vector3();\n    var q = new THREE.Quaternion();\n    var s = new THREE.Vector3();\n    m.decompose(t,q,s);\n  };\n\n\n  // change camera.aspect on window resize and render w. new projection matrix<br>\n  // first two lines commented out to allow viewport resize and aspect ratio\n  // distortion to keep constant x and y projections\n  var onWindowResize = function() {\n    //camera.aspect = window.innerWidth / window.innerHeight;  \n    //camera.updateProjectionMatrix();\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    render();\n  };\n\n\n  // render scene using camera<br>\n  // possibly orient billboards to face (lookAt) camera\n  var render = function() {\n    if(billboardsFace){\n      billboardsTarget.addVectors(csphere.position, camera.position);\n      billboardsTarget.z *= zoom;  // world camera.pos.z follows the radius\n                                   // of csphere which corresponds to z*zoom\n      Object.keys(billboards).forEach(function(id){\n        billboards[id].lookAt(billboardsTarget);\n      });\n    }\n    if(stats){\n      stats.update();\n    }\n    renderer.render( scene, camera );\n  };\n\n\n\n\n  class Camera3d {  \n\n    constructor(){\n      // use narrative scope to get current shot = narrative.scope().shot<br>\n      // scope is passed in with Camera3d.place\n      this.scope = undefined;\n      // fov = 90deg default - can be set by Camera3d.place()\n      this.fov = fov;\n      this.tl = {};\n      this.tlp = {};\n      this.shot = {};\n      this.action = {};\n\n\n      // start stats tracking - fps  \n      $(window).load(function(){ \n        // fps\n        stats = (function(){\n          var stats = new Stats();\n          stats.setMode(0); // 0: fps, 1: ms\n          $(\"#stats\").html( stats.domElement ); // replace current contents of div\n          return stats;\n        })(); \n      });\n\n      // key controls:<br>\n      // * not-alt  => 'cut' - no anim\n      // *    alt  => 'fly' - anim\n      // * not-shft => rel transform 'by'\n      // *    shft => abs transform 'to'\n      window.addEventListener(\"keyup\", function(e){\n        var a;\n        switch(e.keyCode){\n\n          // CENTER/HOME - normalize camera and csphere<br>\n          // m - center\n          case 77: \n            a = {d:3};\n            if(e.shiftKey){ // sh => home\n              camera3d.home(a);  \n              log({t:'camera3d', f:'home', a:a});\n              if(record_shots){\n                mediator.record({t:'camera3d', f:'home', a:a});\n              }\n            }else{          // no-sh => center - no change to zoom\n              camera3d.center(a);\n              log({t:'camera3d', f:'center', a:a});\n              if(record_shots){\n                mediator.record({t:'camera3d', f:'center', a:a});\n              }\n            }\n            break;\n\n          // LOOKAT<br>\n          // l\n          case 76:\n            if(e.altKey){     // alt => billboards\n              if(e.shiftKey){ // free bbs\n                camera3d.billboardsFree();    \n                log({t:'camera3d', f:'billboardsFree'});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'billboardsFree'});\n                }\n              }else{          // alt-l bbs lookAt camera\n                camera3d.billboardsFaceCamera();\n                log({t:'camera3d', f:'billboardsFaceCamera'});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'billboardsFaceCamera'});\n                }\n              }\n            }else{            // l => camera\n              if(e.shiftKey){\n                // lookAt origin in absolute coords\n                camera.lookAt([0.0, 0.0, 0.0]);\n                log({t:'camera3d', f:'lookAt', a:[0.0,0.0,0.0]}); \n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'lookAt', a:[0.0,0.0,0.0]}); \n                }\n              }else{\n                // lookAt center of Camerasphere\n                camera3d.lookAt();    \n                log({t:'camera3d', f:'lookAt'}); \n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'lookAt'}); \n                }\n              }\n            }\n            break;\n\n\n          // ZOOM<br>\n          // a - zoom in          \n          case 65: \n            if(e.altKey){     // alt => fly\n              if(e.shiftKey){ // sh => abs transform ('to')\n               a = {s:0.5, d:3};\n                camera3d.zoomflyTo(a);  \n                log({t:'camera3d', f:'zoomflyTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'zoomflyTo', a:a});\n                }\n              }else{          // no-sh => rel transform ('by')\n                a = {s:0.9, d:3};\n                camera3d.zoomflyBy(a);\n                log({t:'camera3d', f:'zoomflyBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'zoomflyBy', a:a});\n                }\n              }\n            }else{            // no-alt => cut\n              if(e.shiftKey){ // shift  => 'to'\n                a = {s:0.5};  // 90/120\n                camera3d.zoomcutTo(a);\n                log({t:'camera3d', f:'zoomcutTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'zoomcutTo', a:a});\n                }\n              }else{         \n                a = {s:0.9};\n                camera3d.zoomcutBy(a); // 1.0/0.9 = 1.1111\n                log({t:'camera3d', f:'zoomcutBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'zoomcutBy', a:a});\n                }\n              }\n            }\n            break;\n\n          // s - zoom out          \n          case 83: \n            if(e.altKey){     // alt => fly\n              if(e.shiftKey){ // sh => abs transform ('to')\n                a = {s:2.0, d:3};\n                camera3d.zoomflyTo(a);  \n                log({t:'camera3d', f:'zoomflyTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'zoomflyTo', a:a});\n                }\n              }else{          // no-sh => rel transform ('by')\n                a = {s:1.1111, d:3};\n                camera3d.zoomflyBy(a);\n                log({t:'camera3d', f:'zoomflyBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'zoomflyBy', a:a});\n                }\n              }\n            }else{            // no-alt => cut\n              if(e.shiftKey){ // shift  => 'to'\n                a = {s:2.0};\n                camera3d.zoomcutTo(a);\n                log({t:'camera3d', f:'zoomcutTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'zoomcutTo', a:a});\n                }\n              }else{         \n                a = {s:1.1111};\n                camera3d.zoomcutBy(a); // 1.0/0.9 = 1.1111\n                log({t:'camera3d', f:'zoomcutBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'zoomcutBy', a:a});\n                }\n              }\n            }\n            break;\n\n\n          // ROLL<br>\n          // b - roll neg => ccw         \n          case 66: \n            if(e.altKey){     // alt => fly\n              if(e.shiftKey){ // sh => abs transform ('to')\n                a = {r:-1.57, d:3};  // PI/8\n                log({t:'camera3d', f:'rollflyTo', a:a});\n                camera3d.rollflyTo(a);  \n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'rollflyTo', a:a});\n                }\n              }else{          // no-sh => rel transform ('by')\n                a = {r:-0.3927, d:3}; // PI/4 \n                camera3d.rollflyBy(a);\n                log({t:'camera3d', f:'rollflyBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'rollflyBy', a:a});\n                }\n              }\n            }else{            // no-alt => cut\n              if(e.shiftKey){ // shift  => 'to'\n                a = {r:-1.57};  \n                camera3d.rollcutTo(a);\n                log({t:'camera3d', f:'rollcutTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'rollcutTo', a:a});\n                }\n              }else{         \n                a = {r:-0.3927};\n                camera3d.rollcutBy(a); // 1.0/0.9 = 1.1111\n                log({t:'camera3d', f:'rollcutBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'rollcutBy', a:a});\n                }\n              }\n            }\n            break;\n\n          // n - roll pos => cw         \n          case 78:\n            if(e.altKey){     // alt => fly\n              if(e.shiftKey){ // sh => abs transform ('to')\n               a = {r:1.57, d:3};  // PI/8\n                camera3d.rollflyTo(a);  \n                log({t:'camera3d', f:'rollflyTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'rollflyTo', a:a});\n                }\n              }else{          // no-sh => rel transform ('by')\n                camera3d.rollflyBy(a);\n                log({t:'camera3d', f:'rollflyBy', a:a});\n                a = {r:0.3927, d:3}; // PI/4 \n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'rollflyBy', a:a});\n                }\n              }\n            }else{            // no-alt => cut\n              if(e.shiftKey){ // shift  => 'to'\n                a = {r:1.57};  \n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'rollcutTo', a:a});\n                }\n                camera3d.rollcutTo(a);\n              }else{         \n                a = {r:0.3927};\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'rollcutBy', a:a});\n                }\n                camera3d.rollcutBy(a); // 1.0/0.9 = 1.1111\n              }\n            }\n            break;\n\n          \n          // PAN/TILT<br>\n          // left arrow - pan (look) left          \n          case 37: \n            if(e.shiftKey){ // sh => abs transform ('to')\n              a = {r:0.7854, d:3};\n              camera3d.panflyTo(a);  \n              log({t:'camera3d', f:'panflyTo', a:a});\n              if(record_shots){\n                mediator.record({t:'camera3d', f:'panflyTo', a:a});\n              }\n            }else{          // no-sh => rel transform ('by')\n              a = {r:0.19635, d:3};\n              camera3d.panflyBy(a);\n              log({t:'camera3d', f:'panflyBy', a:a});\n              if(record_shots){\n                mediator.record({t:'camera3d', f:'panflyBy', a:a});\n              }\n            }\n            break;\n\n          // right arrow - pan (look) right          \n          case 39: \n            if(e.shiftKey){ // sh => abs transform ('to')\n              a = {r:-0.7854, d:3};\n              camera3d.panflyTo(a);  \n              log({t:'camera3d', f:'panflyTo', a:a});\n              if(record_shots){\n                mediator.record({t:'camera3d', f:'panflyTo', a:a});\n              }\n            }else{          // no-sh => rel transform ('by')\n              a = {r:-0.19635, d:3};\n              camera3d.panflyBy(a);\n              log({t:'camera3d', f:'panflyBy', a:a});\n              if(record_shots){\n                mediator.record({t:'camera3d', f:'panflyBy', a:a});\n              }\n            }\n            break;\n\n          // up arrow - tilt (look) up          \n          case 38: \n            if(e.shiftKey){ // sh => abs transform ('to')\n              a = {r:0.7854, d:3};\n              camera3d.tiltflyTo(a);  \n              log({t:'camera3d', f:'tiltflyTo', a:a});\n              if(record_shots){\n                mediator.record({t:'camera3d', f:'tiltflyTo', a:a});\n              }\n            }else{          // no-sh => rel transform ('by')\n              a = {r:0.19635, d:3};\n              camera3d.tiltflyBy(a);\n              log({t:'camera3d', f:'tiltflyBy', a:a});\n              if(record_shots){\n                mediator.record({t:'camera3d', f:'tiltflyBy', a:a});\n              }\n            }\n            break;\n\n          // down arrow - tilt (look) down          \n          case 40: \n            if(e.shiftKey){ // sh => abs transform ('to')\n              a = {r:-0.7854, d:3};\n              camera3d.tiltflyTo(a);  \n              log({t:'camera3d', f:'tiltflyTo', a:a});\n              if(record_shots){\n                mediator.record({t:'camera3d', f:'tiltflyTo', a:a});\n              }\n            }else{          // no-sh => rel transform ('by')\n              a = {r:-0.19635, d:3};\n              camera3d.tiltflyBy(a);\n              log({t:'camera3d', f:'tiltflyBy', a:a});\n              if(record_shots){\n                mediator.record({t:'camera3d', f:'tiltflyBy', a:a});\n              }\n            }\n            break;\n\n\n\n          // EXAMINE - longitudinal - 'yaw' - rotate csphere around y-axis<br>  \n          // g => yaw neg => ccw         \n          case 71:    \n            if(e.altKey){     // alt => fly\n              if(e.shiftKey){ // sh => abs transform ('to')\n                a = {r:-1.57, d:3};  // PI/8\n                camera3d.yawflyTo(a);  \n                log({t:'camera3d', f:'yawflyTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'yawflyTo', a:a});\n                }\n              }else{          // no-sh => rel transform ('by')\n                a = {r:-0.3927, d:3}; // PI/4 \n                camera3d.yawflyBy(a);\n                log({t:'camera3d', f:'yawflyBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'yawflyBy', a:a});\n                }\n              }\n            }else{            // no-alt => cut\n              if(e.shiftKey){ // shift  => 'to'\n                a = {r:-1.57};  \n                camera3d.yawcutTo(a);\n                log({t:'camera3d', f:'yawcutTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'yawcutTo', a:a});\n                }\n              }else{         \n                a = {r:-0.3927};\n                camera3d.yawcutBy(a); // 1.0/0.9 = 1.1111\n                log({t:'camera3d', f:'yawcutBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'yawcutBy', a:a});\n                }\n              }\n            }\n            break;\n\n          // h - yaw pos => cw         \n          case 72:  \n            if(e.altKey){     // alt => fly\n              if(e.shiftKey){ // sh => abs transform ('to')\n                a = {r:1.57, d:3};  // PI/8\n                camera3d.yawflyTo(a);  \n                log({t:'camera3d', f:'yawflyTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'yawflyTo', a:a});\n                }\n              }else{          // no-sh => rel transform ('by')\n                a = {r:0.3927, d:3}; // PI/4 \n                camera3d.yawflyBy(a);\n                log({t:'camera3d', f:'yawflyBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'yawflyBy', a:a});\n                }\n              }\n            }else{            // no-alt => cut\n              if(e.shiftKey){ // shift  => 'to'\n                a = {r:1.57};  \n                camera3d.yawcutTo(a);\n                log({t:'camera3d', f:'yawcutTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'yawcutTo', a:a});\n                }\n              }else{         \n                a = {r:0.3927};\n                camera3d.yawcutBy(a); // 1.0/0.9 = 1.1111\n                log({t:'camera3d', f:'yawcutBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'yawcutBy', a:a});\n                }\n              }\n            }\n            break;\n\n\n          // EXAMINE - latitudinal - 'pitch' - rotate csphere around x-axis<br>\n          // j => pitch neg => ccw         \n          case 74:   \n            if(e.altKey){     // alt => fly\n              if(e.shiftKey){ // sh => abs transform ('to')\n               a = {r:-1.57, d:3};  // PI/8\n                camera3d.pitchflyTo(a);  \n                log({t:'camera3d', f:'pitchflyTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'pitchflyTo', a:a});\n                }\n              }else{          // no-sh => rel transform ('by')\n                a = {r:-0.3927, d:3}; // PI/4 \n                camera3d.pitchflyBy(a);\n                log({t:'camera3d', f:'pitchflyBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'pitchflyBy', a:a});\n                }\n              }\n            }else{            // no-alt => cut\n              if(e.shiftKey){ // shift  => 'to'\n                a = {r:-1.57};  \n                camera3d.pitchcutTo(a);\n                log({t:'camera3d', f:'pitchcutTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'pitchcutTo', a:a});\n                }\n              }else{         \n                a = {r:-0.3927};\n                camera3d.pitchcutBy(a); // 1.0/0.9 = 1.1111\n                log({t:'camera3d', f:'pitchcutBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'pitchcutBy', a:a});\n                }\n              }\n            }\n            break;\n\n          // k - pitch pos => cw          \n          case 75:  \n            if(e.altKey){     // alt => fly\n              if(e.shiftKey){ // sh => abs transform ('to')\n                a = {r:1.57, d:3};  // PI/8\n                camera3d.pitchflyTo(a);  \n                log({t:'camera3d', f:'pitchflyTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'pitchflyTo', a:a});\n                }\n              }else{          // no-sh => rel transform ('by')\n                a = {r:0.3927, d:3}; // PI/4 \n                camera3d.pitchflyBy(a);\n                log({t:'camera3d', f:'pitchflyBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'pitchflyBy', a:a});\n                }\n              }\n            }else{            // no-alt => cut\n              if(e.shiftKey){ // shift  => 'to'\n                a = {r:1.57};  \n                camera3d.pitchcutTo(a);\n                log({t:'camera3d', f:'pitchcutTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'pitchcutTo', a:a});\n                }\n              }else{         \n                a = {r:0.3927};\n                camera3d.pitchcutBy(a); // 1.0/0.9 = 1.1111\n                log({t:'camera3d', f:'pitchcutBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'pitchcutBy', a:a});\n                }\n              }\n            }\n            break;\n\n\n          // DOLLY - translation along axes and more generally<br>\n          // 1 => dollyx+        \n          case 49:    \n            if(e.altKey){     // alt => fly\n              if(e.shiftKey){ // sh => abs transform ('to')\n                a = {x:20, d:3};  \n                camera3d.dollyflyTo(a);  \n                log({t:'camera3d', f:'dollyflyTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'dollyflyTo', a:a});\n                }\n              }else{          // no-sh => rel transform ('by')\n                a = {x:10, d:3};  \n                camera3d.dollyflyBy(a);\n                log({t:'camera3d', f:'dollyflyBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'dollyflyBy', a:a});\n                }\n              }\n            }else{            // no-alt => cut\n              if(e.shiftKey){ // shift  => 'to'\n                a = {x:20};  \n                camera3d.dollycutTo(a);\n                log({t:'camera3d', f:'dollycutTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'dollycutTo', a:a});\n                }\n              }else{         \n                a = {x:10};\n                camera3d.dollycutBy(a); \n                log({t:'camera3d', f:'dollycutBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'dollycutBy', a:a});\n                }\n              }\n            }\n            break;\n\n          // 2 - dollyx-        \n          case 50:  \n            if(e.altKey){     // alt => fly\n              if(e.shiftKey){ // sh => abs transform ('to')\n                a = {x:-20, d:3};  \n                camera3d.dollyflyTo(a);  \n                log({t:'camera3d', f:'dollyflyTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'dollyflyTo', a:a});\n                }\n              }else{          // no-sh => rel transform ('by')\n                a = {x:-10, d:3};  \n                camera3d.dollyflyBy(a);\n                log({t:'camera3d', f:'dollyflyBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'dollyflyBy', a:a});\n                }\n              }\n            }else{            // no-alt => cut\n              if(e.shiftKey){ // shift  => 'to'\n                a = {x:-20};  \n                camera3d.dollycutTo(a);\n                log({t:'camera3d', f:'dollycutTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'dollycutTo', a:a});\n                }\n              }else{         \n                a = {x:-10};\n                camera3d.dollycutBy(a); \n                log({t:'camera3d', f:'dollycutBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'dollycutBy', a:a});\n                }\n              }\n            }\n            break;\n\n          // 6 => dollyy+        \n          case 54:    \n            if(e.altKey){     // alt => fly\n              if(e.shiftKey){ // sh => abs transform ('to')\n                a = {y:20, d:3};  \n                camera3d.dollyflyTo(a);  \n                log({t:'camera3d', f:'dollyflyTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'dollyflyTo', a:a});\n                }\n              }else{          // no-sh => rel transform ('by')\n                a = {y:10, d:3};  \n                camera3d.dollyflyBy(a);\n                log({t:'camera3d', f:'dollyflyBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'dollyflyBy', a:a});\n                }\n              }\n            }else{            // no-alt => cut\n              if(e.shiftKey){ // shift  => 'to'\n                a = {y:20};  \n                camera3d.dollycutTo(a);\n                log({t:'camera3d', f:'dollycutTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'dollycutTo', a:a});\n                }\n              }else{         \n                a = {y:10};\n                camera3d.dollycutBy(a); \n                log({t:'camera3d', f:'dollycutBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'dollycutBy', a:a});\n                }\n              }\n            }\n            break;\n\n          // 7 - dollyy-        \n          case 55:  \n            if(e.altKey){     // alt => fly\n              if(e.shiftKey){ // sh => abs transform ('to')\n                a = {y:-20, d:3};  \n                camera3d.dollyflyTo(a);  \n                log({t:'camera3d', f:'dollyflyTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'dollyflyTo', a:a});\n                }\n              }else{          // no-sh => rel transform ('by')\n                a = {y:-10, d:3};  \n                camera3d.dollyflyBy(a);\n                log({t:'camera3d', f:'dollyflyBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'dollyflyBy', a:a});\n                }\n              }\n            }else{            // no-alt => cut\n              if(e.shiftKey){ // shift  => 'to'\n                a = {y:-20};  \n                camera3d.dollycutTo(a);\n                log({t:'camera3d', f:'dollycutTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'dollycutTo', a:a});\n                }\n              }else{         \n                a = {y:-10};\n                camera3d.dollycutBy(a); \n                log({t:'camera3d', f:'dollycutBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'dollycutBy', a:a});\n                }\n              }\n            }\n            break;\n\n          // O => dollyz+        \n          case 79:    \n            if(e.altKey){     // alt => fly\n              if(e.shiftKey){ // sh => abs transform ('to')\n                a = {z:20, d:3};  \n                camera3d.dollyflyTo(a);  \n                log({t:'camera3d', f:'dollyflyTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'dollyflyTo', a:a});\n                }\n              }else{          // no-sh => rel transform ('by')\n                a = {z:10, d:3};  \n                camera3d.dollyflyBy(a);\n                log({t:'camera3d', f:'dollyflyBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'dollyflyBy', a:a});\n                }\n              }\n            }else{            // no-alt => cut\n              if(e.shiftKey){ // shift  => 'to'\n                a = {z:20};  \n                camera3d.dollycutTo(a);\n                log({t:'camera3d', f:'dollycutTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'dollycutTo', a:a});\n                }\n              }else{         \n                a = {z:10};\n                camera3d.dollycutBy(a); \n                log({t:'camera3d', f:'dollycutBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'dollycutBy', a:a});\n                }\n              }\n            }\n            break;\n\n          // P - dollyz-        \n          case 80:  \n            if(e.altKey){     // alt => fly\n              if(e.shiftKey){ // sh => abs transform ('to')\n                a = {z:-20, d:3};  \n                camera3d.dollyflyTo(a);  \n                log({t:'camera3d', f:'dollyflyTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'dollyflyTo', a:a});\n                }\n              }else{          // no-sh => rel transform ('by')\n                a = {z:-10, d:3};  \n                camera3d.dollyflyBy(a);\n                log({t:'camera3d', f:'dollyflyBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'dollyflyBy', a:a});\n                }\n              }\n            }else{            // no-alt => cut\n              if(e.shiftKey){ // shift  => 'to'\n                a = {z:-20};  \n                camera3d.dollycutTo(a);\n                log({t:'camera3d', f:'dollycutTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'dollycutTo', a:a});\n                }\n              }else{         \n                a = {z:-10};\n                camera3d.dollycutBy(a); \n                log({t:'camera3d', f:'dollycutBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera3d', f:'dollycutBy', a:a});\n                }\n              }\n            }\n            break;\n\n          // 0 - bezier 'through' curve          \n          // * NOTE: bezier() will always fail e2e-spec test because at each run\n          //   the vertices and control points are chosen by Math.random() so\n          //   one run will never match another.\n          case 48: \n            // uses default dur=10 npoints=6\n            if(e.altKey){     // alt => z fly path also\n              a = {d:20, n:6, z:true};\n            }else{\n              a = {d:20, n:6, z:false};\n            }\n            camera3d.bezier(a); \n            log({t:'camera3d', f:'bezier', a:a});\n            if(record_shots){\n              mediator.record({t:'camera3d', f:'bezier', a:a});\n            }\n            break;\n\n\n          default:\n        }\n      });\n    }//ctor\n\n\n    // initialize scene - 'place' camera in scene\n    place(canvasId, template_view, _scope, \n      _scene, _clearColor, _alpha, _fov) {\n      var index = 0,\n                  sphereGeometry,\n                  sphereMaterial;\n\n\n      // canvas via passed in canvasId, and passed in scene\n      canvas = document.getElementById(canvasId);\n      gl = getWebGLContext(canvas);  // libs/webGL/cuon-utils.js\n      //gl = canvas.getContext(\"webgl\", {premultipliedAlpha: false});\n      //gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n  \n      // initialize reference to NarrativeController scope - for UI sync\n      this.scope = _scope;\n  \n      // pass in procedural Scene or use declarative i3d-svg scene in index.html\n      scene = _scene || new THREE.Scene();\n  \n      // clearColor - default white-transparent\n      clearColor = _clearColor || 'transparent'; \n      alpha = _alpha || 0.0;\n  \n\n      // camerasphere\n      sphereGeometry = new THREE.SphereGeometry(50,20,20);\n      sphereMaterial = new THREE.MeshBasicMaterial({color: 0x7777ff, wireframe: true});\n      csphere = new THREE.Mesh(sphereGeometry,sphereMaterial);\n\n      // position the sphere\n      csphere.position.x=0;\n      csphere.position.y=0;\n      csphere.position.z=0;\n\n\n      // camera\n      fov = _fov || 90.0;\n      camera = new THREE.PerspectiveCamera( fov, \n        window.innerWidth / window.innerHeight, 1, 1000 );\n  \n      // default camera.position - could be changed by camera_sphere<br>\n      // camera.position = {x:csph.pos.x, y:csph.pos.y, z:csph.pos.z + 50}\n      camera.position.x = 0.0;\n      camera.position.y = 0.0;\n      camera.position.z = 50.0;\n  \n      // add camera to scene<br>\n      // register camera as actor - for pan tilt roll\n      scene.add(csphere);\n      this.addActorToScene('camera', camera);\n      \n      // add camera as child of csphere\n      csphere.add(camera);\n      this.addActorToScene('csphere', csphere);\n\n      // add the sphere to the scene\n      scene.add(csphere);\n\n      // renderer\n      renderer = new THREE.WebGLRenderer({canvas: canvas, \n        antialias: true, alpha: true});\n  \n      // setClearColor(color, alpha) - use passed params (if given)\n      renderer.setClearColor(clearColor, alpha);\n      renderer.setSize( window.innerWidth, window.innerHeight );\n  \n      // listen for and handle resize event\n      window.addEventListener( 'resize', onWindowResize, false );\n  \n      // initial render\n      setTimeout(function(){\n        render();\n      }, 1000);\n      \n      // begin camera control animation - in sync with GSAP animation\n      //this.animate();\n      TweenMax.ticker.addEventListener('tick', render);\n    }\n\n\n    // get narrative reference\n    set_narrative(o){\n      narrative = o;\n    }\n\n    set_mediator(o){\n      mediator = o; // ref for mediator.record(actions)\n    }\n\n    // diagnostics\n    examine_matrix(m) {\n      examine_matrix(m);\n    }\n\n    // start rendering cycle\n    animate() {\n      requestAnimationFrame(Camera3d.animate);\n      render();\n      if(stats){\n        stats.update();\n      }\n    }\n\n    // * NOTE: lights are children of camerasphere - if csphere.visible\n    //   is changed so do all the child lights ?! (it is inherited)\n    //   Instead change csphere.material.visible which does not affect\n    //   child lights. (property is not inherited)\n    toggle_csphere(a){\n      if(csphere){\n        csphere.material.visible = a.val;\n        $timeout(() => {\n          $rootScope.$apply(() => {\n            narrative.control_state['csph'] = a.val;\n          });\n        });\n        // result of narrative.shot logs abs_url, delta_url and shot\n        // The four values comprise an e2e_spec cell\n        // The cell-shot is detected by utility 'e2e_specg' as a shot (matches\n        // '{\"delta') but there is no exact 'delta' to trigger shot-processing\n        narrative.shot(`shot-fixed:{\"delta-t\":\"camera3d\", \"f\":\"toggle_csphere\", \"a\":${a.val}}`);\n      }\n    }\n    toggle_light(a){\n      if(actors[a.name]){\n        actors[a.name].visible = a.val;\n        $timeout(() => {\n          $rootScope.$apply(() => {\n            narrative.control_state[a.name] = a.val;\n          });\n        });\n        // result of narrative.shot logs abs_url, delta_url and shot\n        // The four values comprise an e2e_spec cell\n        // The cell-shot is detected by utility 'e2e_specg' as a shot (matches\n        // '{\"delta') but there is no exact 'delta' to trigger shot-processing\n        narrative.shot(`shot-fixed:{\"delta-t\":\"camera3d\", \"f\":\"toggle_light\", \"a\":{\"name\":\"${a.name}\",\"val\":${a.val}}}`);\n      }\n    }\n\n    light(id){\n      return camera3d.actor(id);\n    }\n\n    csphere(){\n      return csphere;\n    }\n\n    // normalize position orientation of csphere and camera - but not zoom\n    center(a){\n      a.d = a.d || 0.0;\n\n      //shot\n      this.shot = {delta: {\n        timeline: {p: {paused:true, repeat:0},\n                 actors:{\n                   'i3d:camera:rotation':[{dur:a.d, \n                                   p:{'x':0.0, 'y':0.0, 'z':0.0,\n                                       immediateRender:false}}],\n                   'i3d:csphere:position':[{dur:a.d, \n                                   p:{'x':0.0, 'y':0.0, 'z':0.0,\n                                       immediateRender:false}}],\n                   'i3d:csphere:rotation':[{dur:a.d, \n                                   p:{'x':0.0, 'y':0.0, 'z':0.0,\n                                       immediateRender:false}}],\n                   'i2d:plane':[{dur:a.d, \n                                   p:{'x': 0.0, 'y': 0.0, immediateRender:false}}],\n                   'i2d:zoom_plane':[{dur:a.d, p:{'rotation': 0.0,\n                      svgOrigin:'0% 0%', immediateRender:false}}]\n                 }\n                }//tl\n                }//delta\n      };//shot\n\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n\n      // camera\n      camera.position.x = 0.0;\n      camera.position.y = 0.0;\n      camera.up.x = 0.0;\n      camera.up.y = 1.0;\n      camera.up.z = 0.0;\n      if(camera.fov !== fov){\n        camera.fov = fov;\n        camera.updateProjectionMatrix();\n      }\n\n      // dynamic trackers\n      roll = 0.0;\n      pan = 0.0;\n      tilt = 0.0;\n      yaw = 0.0;\n      pitch = 0.0;\n    }\n\n\n    // normalize position orientation of csphere and camera - AND zoom\n    home(a){\n      a.d = a.d || 0.0;\n\n      //shot\n      this.shot = {delta: {\n        timeline: {p: {paused:true, repeat:0},\n                 actors:{\n                   'i3d:camera:rotation':[{dur:a.d, \n                                   p:{'x':0.0, 'y':0.0, 'z':0.0,\n                                       immediateRender:false}}],\n                   'i3d:csphere:position':[{dur:a.d, \n                                   p:{'x':0.0, 'y':0.0, 'z':0.0,\n                                       immediateRender:false}}],\n                   'i3d:csphere:scale':[{dur:a.d, \n                                   p:{'x':1.0, 'y':1.0, 'z':1.0,\n                                       immediateRender:false}}],\n                   'i3d:csphere:rotation':[{dur:a.d, \n                                   p:{'x':0.0, 'y':0.0, 'z':0.0,\n                                       immediateRender:false}}],\n                   'i2d:plane':[{dur:a.d, \n                                   p:{'x': 0.0, 'y': 0.0, immediateRender:false}}],\n                   'i2d:zoom_plane': [{dur:a.d, p:{rotation: 0.0,\n                   scale:1.0, svgOrigin:'0% 0%', immediateRender:false}}]\n                 }\n                }//tl\n                }//delta\n      };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n\n      // camera\n      camera.position.x = 0.0;\n      camera.position.y = 0.0;\n      camera.up.x = 0.0;\n      camera.up.y = 1.0;\n      camera.up.z = 0.0;\n      if(camera.fov !== fov){\n        camera.fov = fov;\n        camera.updateProjectionMatrix();\n      }\n      if(csphere.radius !== radius){          \n        csphere.radius = radius;     // radius is default 50 \n      }\n\n      // dynamic trackers\n      zoom = 1.0;\n      roll = 0.0;\n      pan = 0.0;\n      tilt = 0.0;\n      yaw = 0.0;\n      pitch = 0.0;\n    }\n\n\n    // ZOOM<br>\n    // modify csphere.scale \n    // * NOTE: dynamic camera.fov animation updates of three.js \n    // camera.updateProjectionMatrix() find an undefined projectionMatrix!<br>\n    // For this reason zoom is not implemented by camera.fov<br>\n    // cut - no animation\n    zoomcutTo(a) {  \n      zoom = a.s;\n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0},\n                               actors:{\n                                'i3d:csphere:scale':[{dur:0, \n                                   p:{x:zoom, y:zoom, z:zoom, immediateRender:false}}]\n                                }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n    zoomcutBy(a) {   \n      zoom *= a.s;\n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0},\n                               actors:{\n                                'i3d:csphere:scale':[{dur:0, \n                                   p:{x:zoom, y:zoom, z:zoom, immediateRender:false}}]\n                               }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n\n    // fly - animate\n    zoomflyTo(a) {  \n      zoom = a.s;\n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0},\n                               actors:{\n                                'i3d:csphere:scale':[{dur:a.d, \n                                   p:{x:zoom, y:zoom, z:zoom, immediateRender:false}}]\n                                }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n    zoomflyBy(a) {\n      zoom *= a.s;\n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0},\n                               actors:{\n                                'i3d:csphere:scale':[{dur:a.d, \n                                   p:{x:zoom, y:zoom, z:zoom, immediateRender:false}}]\n                               }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n\n    // ROLL<br>\n    // modify camera.rotation.z<br> \n    // cut - no animation\n    rollcutTo(a) {  \n      roll = a.r;\n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0},\n                               actors:{\n                                'i3d:camera:rotation':[{dur:0, \n                                   p:{z:roll, immediateRender:false}}]\n                                }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n    rollcutBy(a) {   \n      roll += a.r;\n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0},\n                               actors:{\n                                'i3d:camera:rotation':[{dur:0, \n                                   p:{z:roll, immediateRender:false}}]\n                                }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n\n    // fly - animate\n    rollflyTo(a) {  \n      roll = a.r;\n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0},\n                               actors:{\n                                'i3d:camera:rotation':[{dur:a.d, \n                                   p:{z:roll, immediateRender:false}}]\n                                }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n    rollflyBy(a) {   \n      roll += a.r;\n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0},\n                               actors:{\n                                'i3d:camera:rotation':[{dur:a.d, \n                                   p:{z:roll, immediateRender:false}}]\n                                }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n\n\n    // PAN/TILT<br>\n    // modify camera.rotation.y/camera.rotation.x \n    panflyTo(a) {   \n      pan = a.r;\n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0},\n                               actors:{\n                                'i3d:camera:rotation':[{dur:a.d, \n                                   p:{y:pan, immediateRender:false}}]\n                                }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n    panflyBy(a) {   \n      pan += a.r;\n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0},\n                               actors:{\n                                'i3d:camera:rotation':[{dur:a.d, \n                                   p:{y:pan, immediateRender:false}}]\n                                }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n\n    tiltflyTo(a) {   \n      tilt = a.r;\n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0},\n                               actors:{\n                                'i3d:camera:rotation':[{dur:a.d, \n                                   p:{x:tilt, immediateRender:false}}]\n                                }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n    tiltflyBy(a) {   \n      tilt += a.r;\n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0},\n                               actors:{\n                                'i3d:camera:rotation':[{dur:a.d, \n                                   p:{x:tilt, immediateRender:false}}]\n                                }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n\n\n    // EXAMINE-YAW<br>\n    // longitudinal examination - rotate csphere around y-axis<br> \n    // modify csphere.rotation.y<br>\n    // cut - no animation\n    yawcutTo(a) {  \n      yaw = a.r;\n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0},\n                               actors:{\n                                'i3d:csphere:rotation':[{dur:0, \n                                   p:{y:yaw, immediateRender:false}}]\n                                }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n    yawcutBy(a) {   \n      yaw += a.r;\n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0},\n                               actors:{\n                                'i3d:csphere:rotation':[{dur:0, \n                                   p:{y:yaw, immediateRender:false}}]\n                                }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n\n    // fly - animate\n    yawflyTo(a) {  \n      yaw = a.r;\n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0},\n                               actors:{\n                                'i3d:csphere:rotation':[{dur:a.d, \n                                   p:{y:yaw, immediateRender:false}}]\n                                }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n    yawflyBy(a) {   \n      yaw += a.r;\n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0},\n                               actors:{\n                                'i3d:csphere:rotation':[{dur:a.d, \n                                   p:{y:yaw, immediateRender:false}}]\n                                }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n\n    // EXAMINE-PITCH<br>\n    // lattitudinal examination - rotate csphere around x-axis<br> \n    // modify csphere.rotation.x<br>\n    // cut - no animation\n    pitchcutTo(a) {  \n      pitch = a.r;\n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0},\n                               actors:{\n                                'i3d:csphere:rotation':[{dur:0, \n                                   p:{x:pitch, immediateRender:false}}]\n                                }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n    pitchcutBy(a) {   \n      pitch += a.r;\n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0},\n                               actors:{\n                                'i3d:csphere:rotation':[{dur:0, \n                                   p:{x:pitch, immediateRender:false}}]\n                                }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n\n    // fly - animate\n    pitchflyTo(a) {  \n      pitch = a.r;\n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0},\n                               actors:{\n                                'i3d:csphere:rotation':[{dur:a.d, \n                                   p:{x:pitch, immediateRender:false}}]\n                                }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n    pitchflyBy(a) {   \n      pitch += a.r;\n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0},\n                               actors:{\n                                'i3d:csphere:rotation':[{dur:a.d, \n                                   p:{x:pitch, immediateRender:false}}]\n                                }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n\n\n    // DOLLY - camera translation<br>\n    // fly - animate (default dur=3.0)\n    dollyflyTo(a) {  \n      a.d = a.d || 3.0;\n      a.x = a.x || csphere.position.x;\n      a.y = a.y || csphere.position.y;\n      a.z = a.z || csphere.position.z;\n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0},\n                               actors:{\n                                'i3d:csphere:position':[{dur:a.d, \n                                   p:{x:a.x, y:a.y, z:a.z, \n                                   immediateRender:false}}]\n                                }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n    dollyflyBy(a) {\n      a.d = a.d || 3.0;\n      a.x = a.x || 0.0;\n      a.y = a.y || 0.0;\n      a.z = a.z || 0.0;\n      a.x = csphere.position.x + a.x; \n      a.y = csphere.position.y + a.y; \n      a.z = csphere.position.z + a.z; \n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0},\n                               actors:{\n                                'i3d:csphere:position':[{dur:a.d, \n                                   p:{x:a.x, y:a.y, z:a.z, \n                                   immediateRender:false}}]\n                                }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n\n    // cut - no animation (dur=0)\n    dollycutTo(a) {  \n      a.x = a.x || csphere.position.x;\n      a.y = a.y || csphere.position.y;\n      a.z = a.z || csphere.position.z;\n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0},\n                               actors:{\n                                'i3d:csphere:position':[{dur:0, \n                                   p:{x:a.x, y:a.y, z:a.z, \n                                   immediateRender:false}}]\n                                }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n    dollycutBy(a) {\n      a.d = 0.0;\n      a.x = a.x || 0.0;\n      a.y = a.y || 0.0;\n      a.z = a.z || 0.0;\n      a.x = csphere.position.x + a.x; \n      a.y = csphere.position.y + a.y; \n      a.z = csphere.position.z + a.z; \n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0},\n                               actors:{\n                                'i3d:csphere:position':[{dur:0, \n                                   p:{x:a.x, y:a.y, z:a.z, \n                                   immediateRender:false}}]\n                                }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n\n\n\n\n\n\n\n\n    // random 2d-bezier camera nav<br> \n    // use default 6 points and 'through' bezier curve type\n    bezier(a={d:20, n:6, z:true}){\n      var i,\n          x = [],\n          y = [],\n          z = [],\n          v = [],\n          bezier;\n\n      // bezier 'through' curve points - z:true => fly in z dimension also\n      if(a.z){\n        z[0] = 0.0;\n      }\n      x[0] = 0.0;\n      y[0] = 0.0;\n      if(Math.random() > 0.5){\n        x[1] = 30.0*Math.random();   // ++\n        y[1] = 30.0*Math.random();\n        x[2] = -30.0*Math.random();  // -+\n        y[2] = 30.0*Math.random();\n        x[3] = -30.0*Math.random();  // --\n        y[3] = -30.0*Math.random();\n        x[4] = 30.0*Math.random();  // +-\n        y[4] = -30.0*Math.random();\n        if(a.z){\n          z[1] = -10*Math.random();\n          z[2] = z[1] - 30*Math.random();\n          z[3] = z[2] + 30*Math.random();\n          z[4] = -10*Math.random();\n        }\n      }else{\n        x[1] = -30.0*Math.random();   // --\n        y[1] = -30.0*Math.random();\n        x[2] = -30.0*Math.random();  // -+\n        y[2] = 30.0*Math.random();\n        x[3] = 30.0*Math.random();  // ++\n        y[3] = 30.0*Math.random();\n        x[4] = 30.0*Math.random();  // +-\n        y[4] = -30.0*Math.random();\n        if(a.z){\n          z[1] = -10*Math.random();\n          z[2] = z[1] - 30*Math.random();\n          z[3] = z[2] + 30*Math.random();\n          z[4] = -10*Math.random();\n        }\n      }\n      x[5] = 0.0;\n      y[5] = 0.0;\n      if(a.z){\n        z[5] = 0.0;\n      }\n\n      // create values array\n      for(i=0; i<a.n; i++){\n        if(a.z){\n          v.push({x:x[i], y:y[i], z:z[i]});\n        }else{\n          v.push({x:x[i], y:y[i]});\n        }\n      }\n      bezier = {bezier:{autoRotate:true, \n                        curviness:2, \n                        values:v,\n                        immediateRender:false}};\n\n      // shot<br>\n      // y-coords are webgl \n      this.shot = {delta: {\n        timeline: {p: {paused:true, repeat:0, tweens:[]},\n                   actors:{\n                     'i3d:csphere:position':[{dur:a.d, p:bezier}]\n                   }\n                  }//tl\n                  }//delta\n      };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n\n\n\n\n\n\n\n\n\n\n    // translation on arbitrary axis - transform is relative and cumulative<br>\n    // axis is Vector3 - will be normalized if not already\n    translateAxisDistance(axis, d){\n      axis.normalize();\n      csphere.translateOnAxis(axis, d);\n      var ax = x_axis.dot(axis);\n      var ay = y_axis.dot(axis);\n    }\n\n    // rotate the camerasphere csphere by ordered pitch, yaw, roll\n    rotate(params){\n      var pitch = params.pitch || 0.0;\n      var yaw = params.yaw || 0.0;\n      var roll = params.roll || 0.0;\n\n      matrixa.makeRotationFromEuler(new THREE.Euler(pitch, yaw, roll));\n      csphere.applyMatrix(matrixa);\n    }\n\n    // rotation around arbitraray axis - transform is relative and cumulative<br>\n    // axis is Vector3 - will be normalized if not already\n    rotateAxisAngle(x,y,z, angle){\n      var axis = new THREE.Vector3(x,y,z);\n      axis.normalize();\n      csphere.rotateOnAxis(axis, angle);\n    }\n\n    // relative rotation/scale\n    relRotateScale(params){\n      //Object.keys(params).forEach(function(p){\n      //});\n      var pitch = params.pitch || 0.0;\n      var yaw = params.yaw || 0.0;\n      var roll = params.roll || 0.0;\n      var scale = params.zoom || 1.0;\n\n      // all vals\n\n\n      // rotate-scale-translate (by x/y/z* scale)\n      matrixa.makeRotationFromEuler(new THREE.Euler(pitch, yaw, roll));\n      matrixa.multiplyScalar(scale);  // scale\n      //examine_matrix(matrixa);\n            \n      // apply relative rotation-scale to csphere\n      csphere.applyMatrix(matrixa);\n      //examine_matrix(csphere.matrix);\n    }\n\n\n    // transform the camerasphere csphere by combination of translation,\n    // rotation and zoom\n    // * NOTE: params = { tx:x, ty:y, tz:z, pitch:p, yaw:y, roll:r, zoom:z}\n    transform(params){\n      Object.keys(params).forEach(function(p){\n      });\n      var x = params.tx || 0.0;\n      var y = params.ty || 0.0;\n      var z = params.tz || 0.0;\n      var pitch = params.pitch || 0.0;\n      var yaw = params.yaw || 0.0;\n      var roll = params.roll || 0.0;\n      var scale = params.zoom || 1.0;\n\n      // all vals\n\n      // examine initial csphere matrix\n      examine_matrix(csphere.matrix);\n\n\n      // absolute translation - matrixb\n      matrixb.makeTranslation(zoom*x, zoom*y, zoom*z);\n      examine_matrix(matrixb);\n      \n      // apply absolute translation to csphere\n      csphere.applyMatrix(matrixb);\n      examine_matrix(csphere.matrix);\n\n      // rotate-scale-translate (by x/y/z* scale)\n      matrixa.makeRotationFromEuler(new THREE.Euler(pitch, yaw, roll));\n      matrixa.multiplyScalar(scale);  // scale\n      //examine_matrix(matrixa);\n            \n      // apply relative rotation-scale to csphere\n      csphere.applyMatrix(matrixa);\n      //examine_matrix(csphere.matrix);\n    }\n\n\n    // pan/tilt camera to point at specific actor/billboard<br> \n    // no-arg default is to look at center of csphere - camerasphere\n    // if array lookAt point with abs.coords given by array\n    // if three numbers then form the Vector3 with those coords\n    // * NOTE: if an array of three numbers a=[x,y,z] is passed in an action, \n    //   Mediator.exec({t:camera3d, f:lookAt, a:[x.y.z]}) will pull out the\n    //   values and apply them to Camera3d.lookAt(x,y,z)\n    lookAt(id, y, z){\n      if(check.number(id) && check.number(y) && check.number(z)){\n        let a = [id,y,z];\n        if(config.unit_test){\n          return a;\n        }else{\n          camera.lookAt(new THREE.Vector3(id, y, z));\n          // result of narrative.shot logs abs_url, delta_url and shot\n          // The four values comprise an e2e_spec cell\n          // The cell-shot is detected by utility 'e2e_specg' as a shot (matches\n          // '{\"delta') but there is no exact 'delta' to trigger shot-processing\n          narrative.shot(`shot-fixed:{\"delta-t\":\"camera3d\", \"f\":\"lookAt\", \"a\":a}}`);\n        }\n        return;\n      }\n      if(Array.isArray(id)){\n        if(config.unit_test){\n          return id;\n        }else{\n          if(id.length === 3){\n            let a = [id.x, id.y, id.z];\n            camera.lookAt(new THREE.Vector3(id.x, id.y, id.z));\n            // see above\n            narrative.shot(`shot-fixed:{\"delta-t\":\"camera3d\", \"f\":\"lookAt\", \"a\":a}}`);\n          }else{\n            console.log(`!Camera3d.lookAt:arg.length = ${id.length}`);\n          }\n        }\n        return;\n      }\n      if(!id){\n        if(config.unit_test){\n          let v = csphere.position;\n          let a = [v.x, v.y, v.z];\n          return a;\n        }else{\n          if(csphere){\n            let v = csphere.position;\n            camera.lookAt(v);\n            // see above\n            narrative.shot(`shot-fixed:{\"delta-t\":\"camera3d\", \"f\":\"lookAt\", \"a\":{}}`);\n          }else{\n            console.log(`!Camera3d.lookAt:csphere is undefined`);\n          }\n        }\n        return;\n      }\n      if(actors[id]){\n        let v = actors[id].position;\n        if(config.unit_test){\n          let a;\n          if(v){\n            a = [v.x, v.y, v.z];\n          }\n          return a;\n        }else{\n          if(v){\n            camera.lookAt(v);\n            // see above\n            narrative.shot(`shot-fixed:{\"delta-t\":\"camera3d\", \"f\":\"lookAt\", \"a\":id}`);\n          }else{\n            console.log(`!Camera3d.lookAt:actors[${id}].position is undefined`);\n          }\n        }\n        return;\n      }else{\n        console.log(`!Camera3d.lookAt:actors[${id}] does not exist`);\n      }\n      return;\n    }\n\n    // camera world pos = csphere.pos + camera.pos is the billboards target\n    billboardsFaceCamera(){\n      billboardsFace = true;\n      // result of narrative.shot logs abs_url, delta_url and shot\n      // The four values comprise an e2e_spec cell\n      // The cell-shot is detected by utility 'e2e_specg' as a shot (matches\n      // '{\"delta') but there is no exact 'delta' to trigger shot-processing\n      narrative.shot(`shot-fixed:{\"delta-t\":\"camera3d\", \"f\":\"billboardsFaceCamera\"}`);\n    }\n\n    // decouple billboards from possible orientation to actor target\n    billboardsFree(){\n      billboardsFace = false;\n      // result of narrative.shot logs abs_url, delta_url and shot\n      // The four values comprise an e2e_spec cell\n      // The cell-shot is detected by utility 'e2e_specg' as a shot (matches\n      // '{\"delta') but there is no exact 'delta' to trigger shot-processing\n      narrative.shot(`shot-fixed:{\"delta-t\":\"camera3d\", \"f\":\"billboardsFree\"}`);\n    }\n\n\n    // * NOTE: camera_sphere sets camera.position at csphere position but\n    //   camera.position.z = csphere.position.z + 50 looking to center of csphere\n    // * NOTE: default camera.position = {x:0.0, y:0.0, z:50.0}\n    attachAsSurfaceChild(camerasphere, _radius){\n      camera.position.x = camerasphere.position.x;\n      camera.position.y = camerasphere.position.y;\n      camera.position.z = camerasphere.position.z;\n      camera.position.z += _radius;\n\n      // set radius - keep as const (used in zoom normalization)\n      radius = _radius;\n\n      camerasphere.add(camera);\n      camera.name = 'camera';\n\n      // keep a reference to camerasphere - parent of camera and lights\n      csphere = camerasphere;\n\n      // set dynamic csphere.radius\n      csphere.radius = _radius;\n    }\n\n\n    // add a passed in actor Object3d to scene - register in actors by id<br>\n    // the scene is an Object3d and is the root of the scenegraph tree\n    addActorToScene(id, o3d, pid){\n      var duplicate = false; \n      scene.traverse((o) => {\n        if(o.name === id){\n          duplicate = true;\n        }\n      });\n      if(duplicate){\n        return false ; // exception - duplication - don't add bb to bbs list\n      }\n\n      // add to actors list\n      if(o3d !== scene){\n        o3d.name = id;\n        if(pid && actors[pid]){\n          actors[pid].add(o3d); // add to parent\n        }else{\n          scene.add(o3d);       // add as root to scene\n        }\n        actors[id] = o3d;\n        o3d.updateMatrix(); //needed?\n      }else{\n      }\n      return true;\n    }\n\n    // remove actor Object3d from the scene\n    removeActorFromScene(id){\n      var node = actors[id],\n          p;\n\n      if(node){\n        if(node.parent){\n          p = node.parent;\n          p.remove(node);\n        }else{\n          // prev_scene is the container of all webgl actors to be removed\n          prev_scene.remove(node);\n        }\n        delete actors[id];\n      }\n    }    \n\n    actor(id){\n      return actors[id] || null;\n    }\n    reportActors(){\n      return Object.keys(actors); // ids\n    }\n\n    // add a passed in actor/billboard Object3d to the scene\n    addBillboardToScene(id, o3d, pid){\n      // addActor returns true if no webgl duplicate found => can add to bb list\n      if(this.addActorToScene(id, o3d, pid)){\n        billboards[id] = o3d;\n      }\n    }\n    // remove actor/billboard Object3d from the scene\n    removeBillboardFromScene(id){\n      if(billboards[id]){\n        delete billboards[id];\n      }\n      this.removeActorFromScene(id);\n    }\n\n    billboard(id){\n      return billboards[id] || null;\n    }\n    reportBillboards(){\n      return Object.keys(billboards); // ids\n    }\n\n\n    // remove current scene\n    changeTemplateScene(template, _scene){\n      prev_scene = scene; // used to remove scene-actor children\n      scene = _scene || (new THREE.Scene());\n      scene.name = template;\n\n      // setClearColor(color, alpha)\n      renderer.setClearColor(clearColor, alpha);\n      renderer.setSize( window.innerWidth, window.innerHeight );\n      renderer.render(scene, camera);\n    }\n\n    // get webgl rendering context\n    gl(){\n      return gl;\n    }\n  }//class Camera3d\n\n\n  // return factory object<br>\n  // (redundant) maintenance of Singleton\n  if(!camera3d){\n    camera3d = new Camera3d();  // create Camera3d singleton instance once\n  }\n  return camera3d;   // return ref to single instance\n}]);\n"],"file":"services/camera3d-service.js","sourceRoot":"/source/"}