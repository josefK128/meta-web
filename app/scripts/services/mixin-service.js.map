{"version":3,"names":[],"mappings":"","sources":["services/mixin-service.js"],"sourcesContent":["// * mixin-service.js\n// * adds collection of methods to a given object<br> \n// (extend => singleton methods)<br>\n// (include => instance methods)\n//\n// * @dependencies: none <br>\n//   @param none<br>\n//   @ngInject\n//\n// * NOTE: ngInject is used by ngAnnotate to generate a \n//   minification-safe injection annotation such as:\n//   ```function($scope) => ['$scope', function($scope){}]```\n\n\nangular.module('app').factory('Mixin', function(){\n  \"use strict\";\n  //Audio.speak(\"Mixin service defined\");\n\n  var oa = [\"object Array\"],\n      toString = Object.prototype.toString,\n      mixin;\n  \n\n  class Mixin {\n    constructor(){}\n\n    // Mixin.extend(o,m) => methods of m are singleton methods of object o<br>\n    // Mixin.extend(F,m) => methods of m are static methods of F<br>\n    // extend is a closure \n    extend(base, module){  \n      base = base || {};\n      module = module || {};\n      for(var p in module){\n        if(module.hasOwnProperty(p)){\n          if(typeof p === 'object'){\n            base[p] = (toString.call(p) === oa) ? [] : {};\n            this.extend(base[p], p);\n          }else{\n            base[p] = module[p];\n          }\n        }\n      }\n    }\n\n    // Mixin.include(o,m) => methods of m are instance methods of \n    // every object with prototype o.prototype<br>\n    // Object.include(F,m) => methods of m are instance methods of \n    // all instances created by the constructor F<br>\n    // include is a closure \n    include(base, module){  \n      base = base || {};\n      base.prototype = base.prototype || {};\n      module = module || {};\n      for(var p in module){\n        if(module.hasOwnProperty(p)){\n          if(typeof p === 'object'){\n            base.prototype[p] = (toString.call(p) === oa) ? [] : {};\n            this.include(base.prototype[p], p);\n          }else{\n            base.prototype[p] = module[p];\n          }\n        }\n      }\n    }\n  \n    // extend_all is extend but for all ancestor properties \n    extend_all(base, module){  \n      base = base || {};\n      module = module || {};\n      for(var p in module){\n        if(typeof p === 'object'){\n          base[p] = (toString.call(p) === oa) ? [] : {};\n          this.extend(base[p], p);\n        }else{\n          base[p] = module[p];\n        }\n      }\n    }\n\n    // include_all is include but for all ancestor properties \n    include_all(base, module){  \n      base = base || {};\n      base.prototype = base.prototype || {};\n      module = module || {};\n      for(var p in module){\n        if(typeof p === 'object'){\n          base.prototype[p] = (toString.call(p) === oa) ? [] : {};\n          this.include(base.prototype[p], p);\n        }else{\n          base.prototype[p] = module[p];\n        }\n      }\n    }\n\n    // for unit test verification - does o contain property p\n    verify(o,p){\n      return(o[p] ? true : false);\n    }\n  }\n\n  // return factory object<br>\n  // (redundant) maintenance of Singleton\n  if(!mixin){\n    mixin = new Mixin();  // create Mixin singleton instance\n  }\n  return mixin;           // return Mixin singleton instance\n});\n\n\n"],"file":"services/mixin-service.js","sourceRoot":"/source/"}