{"version":3,"names":[],"mappings":"","sources":["services/camera2d-service.js"],"sourcesContent":["// * camera2d-service.js\n// * interactive controls of 2d translation and scale-rotation planes\n//\n// * @dependencies: params services, config, GSAP modules<br>\n//   @param {index.html} Angular object value 'config'<br>\n//   @param {'./scripts/services/log-service'} Log<br>\n//   @param {GSAP} TweenMax<br>\n//   @param {GSAP} TimelineMax<br>\n//   @ngInject<br>\n//\n// * NOTE: ngInject is used by ngAnnotate to generate a \n//   minification-safe injection annotation such as:\n//   ```function($scope) => ['$scope', function($scope){}]```\n\n\nangular.module('app').service('Camera2d', [\"config\", \"Log\", \"TweenMax\", \"TimelineMax\", function(config, Log, \n  TweenMax, TimelineMax){\n  \"use strict\";\n\n\n  var camera2d,\n\n      // closure vars so 'this.f' calls inside Med/Nar are correct<br>\n      // if this.med/nar were instance vars of camera3d 'this' would be Camera2d\n      mediator,  \n      narrative, \n\n      // same motivation in key handlers (this = window)<br>\n      // this.record_shots would be undefined in key handlers\n      record_shots = config.record_shots,\n      log = Log.log;\n\n\n  class Camera2d {  \n\n    constructor(){\n      // use narrative scope to get current shot = narrative.scope().shot<brr>\n      // scope is passed in with Camera2d.place\n      this.scope = undefined;\n      this.tl = {};\n      this.tlp = {};\n      this.shot = {};\n      this.action = {};\n     \n      // dolly - plane\n      this.plane = undefined;\n      this.x = 0.0;      // plane (webgl y-coord!)\n      this.y = 0.0;\n\n      // zoom and roll - zoom_plane child of plane\n      this.zoom_plane = undefined;\n      this.angle = 0.0;  // zoom_plane - angle degrees\n      this.scale = 1.0;\n\n\n      // key controls<br>\n      // * not-alt  => 'cut' - no anim\n      // *    alt  => 'fly' - anim\n      // * not-shft => rel transform 'by'\n      // *    shft => abs transform 'to'\n      // * NOTE: logging of action is for building e2e_test cell when \n      //   generating e2e_spec\n      window.addEventListener(\"keyup\", function(e){\n        var a;\n        switch(e.keyCode){\n\n          // CENTER/HOME - normalize camera and csphere<br>\n          // r - home,center - 2d only!\n          case 82: \n            a = {d:3};\n            if(e.shiftKey){ // sh => home\n              camera2d.home(a);  \n              log({t:'camera2d', f:'home', a:a});\n              if(record_shots){\n                mediator.record({t:'camera2d', f:'home', a:a});\n              }\n            }else{          // no-sh => center - no change to zoom\n              camera2d.center(a);\n              log({t:'camera2d', f:'center', a:a});\n              if(record_shots){\n                mediator.record({t:'camera2d', f:'center', a:a});\n              }\n            }\n            break;\n\n          // ZOOM<br>\n          // z - zoom in          \n          case 90: \n            if(e.altKey){     // alt => fly\n              if(e.shiftKey){ // sh => abs transform ('to')\n                a = {s:2.0, d:3};\n                camera2d.zoomflyTo(a);  \n                log({t:'camera2d', f:'zoomflyTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'zoomflyTo', a:a});\n                }\n              }else{          // no-sh => rel transform ('by')\n                a = {s:1.1111, d:3};\n                camera2d.zoomflyBy(a);\n                log({t:'camera2d', f:'zoomflyBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'zoomflyBy', a:a});\n                }\n              }\n            }else{            // no-alt => cut\n              if(e.shiftKey){ // shift  => 'to'\n                a = {s:2.0};\n                camera2d.zoomcutTo(a);\n                log({t:'camera2d', f:'zoomcutTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'zoomcutTo', a:a});\n                }\n              }else{         \n                a = {s:1.1111};\n                camera2d.zoomcutBy(a); // 1.0/0.9 = 1.1111\n                log({t:'camera2d', f:'zoomcutBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'zoomcutBy', a:a});\n                }\n              }\n            }\n            break;\n\n          // x - zoom out          \n          case 88:\n            if(e.altKey){     // alt => fly\n              if(e.shiftKey){ // sh => abs transform ('to')\n                a = {s:0.5, d:3};\n                camera2d.zoomflyTo(a);  \n                log({t:'camera2d', f:'zoomflyTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'zoomflyTo', a:a});\n                }\n              }else{          // no-sh => rel transform ('by')\n                a = {s:0.9, d:3};\n                camera2d.zoomflyBy(a);\n                log({t:'camera2d', f:'zoomflyBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'zoomflyBy', a:a});\n                }\n              }\n            }else{            // no-alt => cut\n              if(e.shiftKey){ // shift  => 'to'\n                a = {s:0.5};\n                camera2d.zoomcutTo(a);\n                log({t:'camera2d', f:'zoomcutTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'zoomcutTo', a:a});\n                }\n              }else{         \n                a = {s:0.9};\n                camera2d.zoomcutBy(a); \n                log({t:'camera2d', f:'zoomcutBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'zoomcutBy', a:a});\n                }\n              }\n            }\n            break;\n \n\n          // ROLL<br>\n          // c - roll neg => ccw          \n          case 67: \n            if(e.altKey){     // alt => fly\n              if(e.shiftKey){ // sh => abs transform ('to')\n                a = {r:-90, d:3};\n                camera2d.rollflyTo(a);  \n                log({t:'camera2d', f:'rollflyTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'rollflyTo', a:a});\n                }\n              }else{          // no-sh => rel transform ('by')\n                a = {r:-22.5, d:3};\n                camera2d.rollflyBy(a);\n                log({t:'camera2d', f:'rollflyBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'rollflyBy', a:a});\n                }\n              }\n            }else{            // no-alt => cut\n              if(e.shiftKey){ // shift  => 'to'\n                a = {r:-90};\n                camera2d.rollcutTo(a);\n                log({t:'camera2d', f:'rollcutTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'rollcutTo', a:a});\n                }\n              }else{         \n                a = {r:-22.5};\n                camera2d.rollcutBy(a); \n                log({t:'camera2d', f:'rollcutBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'rollcutBy', a:a});\n                }\n              }\n            }\n            break;\n\n          // v - roll pos => cw          \n          case 86: \n            if(e.altKey){     // alt => fly\n              if(e.shiftKey){ // sh => abs transform ('to')\n                a = {r:90, d:3};\n                camera2d.rollflyTo(a);  \n                log({t:'camera2d', f:'rollflyTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'rollflyTo', a:a});\n                }\n              }else{          // no-sh => rel transform ('by')\n                a = {r:22.5, d:3};\n                camera2d.rollflyBy(a);\n                log({t:'camera2d', f:'rollflyBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'rollflyBy', a:a});\n                }\n              }\n            }else{            // no-alt => cut\n              if(e.shiftKey){ // shift  => 'to'\n                a = {r:90};\n                camera2d.rollcutTo(a);\n                log({t:'camera2d', f:'rollcutTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'rollcutTo', a:a});\n                }\n              }else{         \n                a = {r:22.5};\n                camera2d.rollcutBy(a); \n                log({t:'camera2d', f:'rollcutBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'rollcutBy', a:a});\n                }\n              }\n            }\n            break;\n\n\n          // DOLLY<br>\n          // q - dollyX+          \n          case 81: \n            if(e.altKey){     // alt => fly\n              if(e.shiftKey){ // sh => abs transform ('to')\n                a = {x:20, d:3};\n                camera2d.dollyflyTo(a);  \n                log({t:'camera2d', f:'dollyflyTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'dollyflyTo', a:a});\n                }\n              }else{          // no-sh => rel transform ('by')\n                a = {x:10, d:3};\n                camera2d.dollyflyBy(a);\n                log({t:'camera2d', f:'dollyflyBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'dollyflyBy', a:a});\n                }\n              }\n            }else{            // no-alt => cut\n              if(e.shiftKey){ // shift  => 'to'\n                a = {x:20};\n                camera2d.dollycutTo(a);\n                log({t:'camera2d', f:'dollycutTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'dollycutTo', a:a});\n                }\n              }else{         \n                a = {x:10};\n                camera2d.dollycutBy(a); \n                log({t:'camera2d', f:'dollycutBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'dollycutBy', a:a});\n                }\n              }\n            }\n            break;\n\n          // w - dollyX-          \n          case 87: \n            if(e.altKey){     // alt => fly\n              if(e.shiftKey){ // sh => abs transform ('to')\n                a = {x:-20, d:3};\n                camera2d.dollyflyTo(a);  \n                log({t:'camera2d', f:'dollyflyTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'dollyflyTo', a:a});\n                }\n              }else{          // no-sh => rel transform ('by')\n                a = {x:-10, d:3};\n                camera2d.dollyflyBy(a);\n                log({t:'camera2d', f:'dollyflyBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'dollyflyBy', a:a});\n                }\n              }\n            }else{            // no-alt => cut\n              if(e.shiftKey){ // shift  => 'to'\n                a = {x:-20};\n                camera2d.dollycutTo(a);\n                log({t:'camera2d', f:'dollyCutTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'dollycutTo', a:a});\n                }\n              }else{         \n                a = {x:-10};\n                camera2d.dollycutBy(a); \n                log({t:'camera2d', f:'dollyCutBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'dollycutBy', a:a});\n                }\n              }\n            }\n            break;\n\n          // y - dollyY+          \n          case 89: \n            if(e.altKey){     // alt => fly\n              if(e.shiftKey){ // sh => abs transform ('to')\n                a = {y:20, d:3};\n                camera2d.dollyflyTo(a);  \n                log({t:'camera2d', f:'dollyflyTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'dollyflyTo', a:a});\n                }\n              }else{          // no-sh => rel transform ('by')\n                a = {y:10, d:3};\n                camera2d.dollyflyBy(a);\n                log({t:'camera2d', f:'dollyflyBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'dollyflyBy', a:a});\n                }\n              }\n            }else{            // no-alt => cut\n              if(e.shiftKey){ // shift  => 'to'\n                a = {y:20};\n                camera2d.dollycutTo(a);\n                log({t:'camera2d', f:'dollycutTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'dollycutTo', a:a});\n                }\n              }else{         \n                a = {y:10};\n                camera2d.dollycutBy(a); \n                log({t:'camera2d', f:'dollycutBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'dollycutBy', a:a});\n                }\n              }\n            }\n            break;\n\n          // u - dollyY-          \n          case 85: \n            if(e.altKey){     // alt => fly\n              if(e.shiftKey){ // sh => abs transform ('to')\n                a = {y:-20, d:3};\n                camera2d.dollyflyTo(a);  \n                log({t:'camera2d', f:'dollyflyTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'dollyflyTo', a:a});\n                }\n              }else{          // no-sh => rel transform ('by')\n                a = {y:-10, d:3};\n                camera2d.dollyflyBy(a);\n                log({t:'camera2d', f:'dollyflyBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'dollyflyBy', a:a});\n                }\n              }\n            }else{            // no-alt => cut\n              if(e.shiftKey){ // shift  => 'to'\n                a = {y:-20};\n                camera2d.dollycutTo(a);\n                log({t:'camera2d', f:'dollycutTo', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'dollycutTo', a:a});\n                }\n              }else{         \n                a = {y:-10};\n                camera2d.dollycutBy(a); \n                log({t:'camera2d', f:'dollycutBy', a:a});\n                if(record_shots){\n                  mediator.record({t:'camera2d', f:'dollycutBy', a:a});\n                }\n              }\n            }\n            break;\n\n\n          // 9 - 'random' bezier 'through' curve  \n          // * NOTE: bezier() will always fail e2e-spec test because at each run\n          //   the vertices and control points are chosen by Math.random() so\n          //   one run will never match another.\n          case 57: \n            // uses default dur=10 npoints=5 \n            camera2d.bezier(); \n            log({t:'camera2d', f:'bezier', a:{d:10}});\n            if(record_shots){\n              mediator.record({t:'camera2d', f:'bezier', a:{d:10}});\n            }\n            break;\n\n          default:\n        }\n      });\n    }//ctor\n\n\n    // tmp!! test action execution<br>\n    // server sends array of three args which expand to test(a,b,c)\n    test(a,b,c){\n    }\n\n    place(scope) {\n      this.scope = scope; // Narrative scope\n      this.plane = document.getElementById(\"plane\");\n      this.zoom_plane = document.getElementById(\"zoom_plane\");\n      console.assert(this.scope, 'error setting scope!');\n      console.assert(this.plane, 'error setting plane!');\n      console.assert(this.zoom_plane, 'error setting zoom_plane!');\n    }\n\n    set_narrative(o){\n      narrative = o;\n    }\n\n    set_mediator(o){\n      mediator = o;\n    }\n\n    actor(id){\n      return document.getElementById(id);\n    }\n\n\n    center(a) {  \n      a.d = a.d || 0.0;\n\n      // shot\n      this.shot = {delta: {\n        timeline: {p: {paused:true, repeat:0},\n                 actors:{\n                   'i2d:plane':[{dur:a.d, \n                                   p:{'x': 0.0, 'y': 0.0, immediateRender:false}}],\n                   'i2d:zoom_plane':[{dur:a.d, p:{'rotation': 0.0,\n                      svgOrigin:'0% 0%', immediateRender:false}}]\n                 }\n                }//tl\n                }//delta\n      };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n\n\n    home(a) {  \n      a.d = a.d || 0.0;\n\n      //shot\n      this.shot = {delta: {\n        timeline: {p: {paused:true, repeat:0},\n                 actors:{\n                   'i2d:plane':[{dur:a.d, \n                                   p:{'x': 0.0, 'y': 0.0, immediateRender:false}}],\n                   'i2d:zoom_plane': [{dur:a.d, p:{rotation: 0.0,\n                   scale:1.0, svgOrigin:'0% 0%', immediateRender:false}}]\n                 }\n                }//tl\n                }//delta\n      };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n\n\n    // ZOOM<br>\n    // cut - no animation\n    zoomcutTo(a) {  \n      if(a.s !== undefined){this.scale = a.s;}\n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0, tweens:[]},\n                               actors:{\n                                'i2d:zoom_plane':[{dur:0, p:{'scale':this.scale,\n                                  svgOrigin:'0% 0%', immediateRender:false}}]\n                               }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n    zoomcutBy(a) {   \n      if(a.s !== undefined){this.scale *= a.s;}\n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0, tweens:[]},\n                               actors:{\n                                'i2d:zoom_plane':[{dur:0, p:{'scale':this.scale,\n                                  svgOrigin:'0% 0%', immediateRender:false}}]\n                               }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n\n    // fly - animate\n    zoomflyTo(a) {   \n      if(a.s !== undefined){this.scale = a.s;}\n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0, tweens:[]},\n                               actors:{\n                                'i2d:zoom_plane':[{dur:a.d, p:{'scale':this.scale,\n                                  svgOrigin:'0% 0%', immediateRender:false}}]\n                               }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n    zoomflyBy(a) {   \n      if(a.s !== undefined){this.scale *= a.s;}\n\n      // shot\n      this.shot = {delta: {\n                    timeline: {p: {paused:true, repeat:0, tweens:[]},\n                               actors:{\n                                'i2d:zoom_plane':[{dur:a.d, p:{'scale':this.scale,\n                                  svgOrigin:'0% 0%', immediateRender:false}}]\n                               }\n                              }//tl\n                          }//delta\n                  };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n\n\n    // ROLL<br>\n    // cut - no animation\n    rollcutTo(a) {  \n      if(a.r !== undefined){this.angle = a.r;}\n\n      // shot\n      this.shot = {delta: {\n        timeline: {p: {paused:true, repeat:0, tweens:[]},\n                   actors:{\n                     'i2d:zoom_plane':[{dur:0, p:{'rotation':this.angle,\n                        svgOrigin:'0% 0%', immediateRender:false}}]\n                   }\n                  }//tl\n                  }//delta\n      };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n    rollcutBy(a) {  \n      if(a.r !== undefined){this.angle += a.r;}\n\n      // shot\n      this.shot = {delta: {\n        timeline: {p: {paused:true, repeat:0, tweens:[]},\n                   actors:{\n                     'i2d:zoom_plane':[{dur:0, p:{'rotation':this.angle,\n                        svgOrigin:'0% 0%', immediateRender:false}}]\n                   }\n                  }//tl\n                  }//delta\n      };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n\n    // fly - animate\n    rollflyTo(a) {  \n      if(a.r !== undefined){this.angle = a.r;}\n\n      // shot\n      this.shot = {delta: {\n        timeline: {p: {paused:true, repeat:0, tweens:[]},\n                   actors:{\n                     'i2d:zoom_plane':[{dur:a.d, p:{'rotation':this.angle,\n                        svgOrigin:'0% 0%', immediateRender:false}}]\n                   }\n                  }//tl\n                  }//delta\n      };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n    rollflyBy(a) {  \n      if(a.r !== undefined){this.angle += a.r;}\n\n      // shot\n      this.shot = {delta: {\n        timeline: {p: {paused:true, repeat:0, tweens:[]},\n                   actors:{\n                     'i2d:zoom_plane':[{dur:a.d, p:{'rotation':this.angle,\n                        svgOrigin:'0% 0%', immediateRender:false}}]\n                   }\n                  }//tl\n                  }//delta\n      };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n\n\n\n    // DOLLY<br>\n    // cut - no animation\n    dollycutTo(a) { \n      if(a.x !== undefined){this.x = a.x;}\n      if(a.y !== undefined){this.y = a.y;}\n\n      // shot<br>\n      // y-coords are webgl - svg translateY must be negated!\n      this.shot = {delta: {\n        timeline: {p: {paused:true, repeat:0, tweens:[]},\n                   actors:{\n                     'i2d:plane':[{dur:0, \n                                   p:{'x': this.x, 'y': -this.y,\n                                     immediateRender:false}}]\n                   }\n                  }//tl\n                  }//delta\n      };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n    dollycutBy(a) { \n      if(a.x !== undefined){this.x += a.x;}\n      if(a.y !== undefined){this.y += a.y;}\n\n      // shot<br>\n      // y-coords are webgl - svg translateY must be negated!\n      this.shot = {delta: {\n        timeline: {p: {paused:true, repeat:0, tweens:[]},\n                   actors:{\n                     'i2d:plane':[{dur:0, \n                                   p:{'x': this.x, 'y': -this.y,\n                                     immediateRender:false}}]\n                   }\n                  }//tl\n                  }//delta\n      };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n\n    // fly - animate\n    dollyflyTo(a) { \n      if(a.x !== undefined){this.x = a.x;}\n      if(a.y !== undefined){this.y = a.y;}\n\n      // shot<br>\n      // y-coords are webgl - svg translateY must be negated!\n      this.shot = {delta: {\n        timeline: {p: {paused:true, repeat:0, tweens:[]},\n                   actors:{\n                     'i2d:plane':[{dur:a.d, \n                                   p:{'x': this.x, 'y': -this.y,\n                                     immediateRender:false}}]\n                   }\n                  }//tl\n                  }//delta\n      };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n    dollyflyBy(a) { \n      if(a.x !== undefined){this.x += a.x;}\n      if(a.y !== undefined){this.y += a.y;}\n\n      // shot<br>\n      // y-coords are webgl - svg translateY must be negated!\n      this.shot = {delta: {\n        timeline: {p: {paused:true, repeat:0, tweens:[]},\n                   actors:{\n                     'i2d:plane':[{dur:a.d, \n                                   p:{'x': this.x, 'y': -this.y,\n                                     immediateRender:false}}]\n                   }\n                  }//tl\n                  }//delta\n      };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n\n    // random 2d-bezier camera nav<br> \n    // use default 6 points and 'through' bezier curve type\n    bezier(a={d:10, n:6}){\n      var i,\n          x = [],\n          y = [],\n          v = [],\n          bezier;\n\n      // bezier 'through' curve points - y coords are made neg!\n      x[0] = 0.0;\n      y[0] = 0.0;\n      if(Math.random() > 0.5){\n        x[1] = 30.0*Math.random();   // ++\n        y[1] = -30.0*Math.random();\n        x[2] = -30.0*Math.random();  // -+\n        y[2] = -30.0*Math.random();\n        x[3] = -30.0*Math.random();  // --\n        y[3] = 30.0*Math.random();\n        x[4] = 30.0*Math.random();  // +-\n        y[4] = 30.0*Math.random();\n      }else{\n        x[1] = -30.0*Math.random();   // --\n        y[1] = 30.0*Math.random();\n        x[2] = -30.0*Math.random();  // -+\n        y[2] = -30.0*Math.random();\n        x[3] = 30.0*Math.random();  // ++\n        y[3] = -30.0*Math.random();\n        x[4] = 30.0*Math.random();  // +-\n        y[4] = 30.0*Math.random();\n      }\n      x[5] = 0.0;\n      y[5] = 0.0;\n\n      // create values array\n      for(i=0; i<a.n; i++){\n        v.push({x:x[i], y:y[i]});\n      }\n      bezier = {bezier:{autoRotate:true, \n                        curviness:2, \n                        values:v,\n                        immediateRender:false}};\n\n      // shot<br>\n      // y-coords are webgl - svg translateY must be negated!\n      this.shot = {delta: {\n        timeline: {p: {paused:true, repeat:0, tweens:[]},\n                   actors:{\n                     'i2d:c':[{dur:a.d, p:bezier}]\n                   }\n                  }//tl\n                  }//delta\n      };//shot\n      this.shot = 'shot-anim:' + JSON.stringify(this.shot);\n      narrative.shot(this.shot);\n    }\n  }//Camera2D\n\n\n  // return factory object<btr>\n  // (redundant) maintenance of Singleton\n  if(!camera2d){\n    camera2d = new Camera2d();  // create Camera2d singleton instance\n  }\n  return camera2d;           // return Camera2d singleton instance\n}]);\n"],"file":"services/camera2d-service.js","sourceRoot":"/source/"}